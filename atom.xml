<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>快乐的图小灵</title>
  
  <subtitle>用猛烈的孤独，开启你伟大的冒险</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://turing5467.github.io/"/>
  <updated>2020-03-20T08:10:18.088Z</updated>
  <id>https://turing5467.github.io/</id>
  
  <author>
    <name>turing5467</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react bug 记录</title>
    <link href="https://turing5467.github.io/2020/03/09/js%E6%A1%86%E6%9E%B6/react/bug/"/>
    <id>https://turing5467.github.io/2020/03/09/js框架/react/bug/</id>
    <published>2020-03-08T16:00:00.000Z</published>
    <updated>2020-03-20T08:10:18.088Z</updated>
    
    <content type="html"><![CDATA[<h3 id="react-bug-记录"><a href="#react-bug-记录" class="headerlink" title="react bug 记录"></a>react bug 记录</h3><h4 id="1-请求"><a href="#1-请求" class="headerlink" title="1.请求"></a>1.请求</h4><p>通过请求获取数组并渲染时，先在构造函数中<code>this.state = { xx: [] }</code>，注意不可以是<code>null</code>。</p><h4 id="2-输入框值"><a href="#2-输入框值" class="headerlink" title="2.输入框值"></a>2.输入框值</h4><p>必须指定onChange事件，否则输入框的值无法修改</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200320160949038.png" alt="image-20200320160949038"></p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200320161001895.png" alt="image-20200320161001895"></p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200320161016805.png" alt="image-20200320161016805"></p><h4 id="3-redux数组push"><a href="#3-redux数组push" class="headerlink" title="3.redux数组push"></a>3.redux数组push</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    ...state,</span><br><span class="line">    searchHistory: state.searchHistory.push(action.item)</span><br><span class="line">    <span class="comment">//❌！！ 因为push函数改变原数组，返回值为新的length值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    ...state,</span><br><span class="line">    searchHistory: [...state.searchHistory, action.item]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">state.searchHistory.push(action.item)</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    ...state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;react-bug-记录&quot;&gt;&lt;a href=&quot;#react-bug-记录&quot; class=&quot;headerlink&quot; title=&quot;react bug 记录&quot;&gt;&lt;/a&gt;react bug 记录&lt;/h3&gt;&lt;h4 id=&quot;1-请求&quot;&gt;&lt;a href=&quot;#1-请求&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>混合开发</title>
    <link href="https://turing5467.github.io/2020/02/04/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/"/>
    <id>https://turing5467.github.io/2020/02/04/工程化/混合开发/</id>
    <published>2020-02-03T16:00:00.000Z</published>
    <updated>2020-02-04T06:41:39.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础步骤"><a href="#基础步骤" class="headerlink" title="基础步骤"></a>基础步骤</h3><ol><li><p>安装Hbuilder-APP开发版本<a href="https://www.dcloud.io/hbuilderx.html" target="_blank" rel="noopener">链接</a></p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200204132006067.png" alt="image-20200204132006067"></p></li><li><p>文件 -&gt; 新建 -&gt; 项目 -&gt; uni-app</p></li></ol><blockquote><p> <code>uni-app</code> 是一个使用 <a href="https://vuejs.org/" target="_blank" rel="noopener">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。 </p></blockquote><ol start="3"><li>运行<a href="https://uniapp.dcloud.io/quickstart" target="_blank" rel="noopener">链接</a></li></ol><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">┌─components            uni-app组件目录</span><br><span class="line">│  └─comp-a.vue         可复用的a组件</span><br><span class="line"></span><br><span class="line">├─pages                 存放业务页面文件</span><br><span class="line">│  ├─index</span><br><span class="line">│  │  └─index.vue       index页面</span><br><span class="line">│  └─list</span><br><span class="line">│     └─list.vue        list页面</span><br><span class="line"></span><br><span class="line">├─static                存放应用引用静态资源的目录</span><br><span class="line"></span><br><span class="line">├─main.js               Vue初始化入口文件</span><br><span class="line">├─App.vue               应用配置，用来配置App全局样式以及监听 应用生命周期</span><br><span class="line">├─manifest.json         配置应用名称、appid、logo、版本等打包信息</span><br><span class="line">└─pages.json            配置页面路由、导航条、选项卡等页面类信息</span><br></pre></td></tr></table></figure><ul><li><p>wxcomponents：存放小程序组件的目录，<a href="https://uniapp.dcloud.io/frame?id=小程序组件支持" target="_blank" rel="noopener">详见</a> </p></li><li><p>hybrid：存放本地网页的目录，<a href="https://uniapp.dcloud.io/component/web-view" target="_blank" rel="noopener">详见</a> </p></li><li><p>platforms ：存放各平台专用页面的目录，<a href="https://uniapp.dcloud.io/platform?id=整体目录条件编译" target="_blank" rel="noopener">详见</a> </p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基础步骤&quot;&gt;&lt;a href=&quot;#基础步骤&quot; class=&quot;headerlink&quot; title=&quot;基础步骤&quot;&gt;&lt;/a&gt;基础步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装Hbuilder-APP开发版本&lt;a href=&quot;https://www.dcloud.io/hbui
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue面试题</title>
    <link href="https://turing5467.github.io/2020/01/14/%E9%9D%A2%E8%AF%95/Vue/"/>
    <id>https://turing5467.github.io/2020/01/14/面试/Vue/</id>
    <published>2020-01-13T16:00:00.000Z</published>
    <updated>2020-04-17T07:45:23.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><ul><li><p>对vue的理解</p></li><li></li><li><p><code>v-if</code>和<code>v-show</code>区别与优先级</p></li><li><p><code>v-for</code>为什么要有key</p></li><li><p><code>v-model</code>怎么用prop实现？</p></li><li><p><code>keep-alive</code>的好处</p></li><li><p>生命周期</p></li><li><p>在哪个生命周期发送网络请求</p></li><li><p>组件通信</p></li><li><p>兄弟传值</p></li><li><p>底层原理</p></li></ul><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><ul><li>Vuex的五大属性</li><li>对Vuex的理解</li><li>使用场景</li></ul><h3 id="Vue面试题"><a href="#Vue面试题" class="headerlink" title="Vue面试题"></a>Vue面试题</h3><p><a href="https://juejin.im/post/5d59f2a451882549be53b170" target="_blank" rel="noopener">30道Vue面试题</a></p><h4 id="1-computed和watch的区别和应用场景"><a href="#1-computed和watch的区别和应用场景" class="headerlink" title="1. computed和watch的区别和应用场景"></a>1. computed和watch的区别和应用场景</h4><ul><li><p><code>computed</code></p><ul><li>计算属性，<strong>依赖于其他属性</strong>来计算</li><li>具有缓存性，只有其依赖的属性值发生<strong>变化</strong>时才会重新计算其值</li></ul></li><li><p><code>watch</code>：</p><ul><li>观察数据的<strong>变化</strong>，一旦变化则触发回调函数</li><li>不具有缓存性，页面重新渲染时<strong>值不变化</strong>也会执行回调函数</li></ul></li><li><p>应用场景</p><ul><li>当我们需要进行<strong>数值计算</strong>，并且<strong>依赖于其它数据</strong>时，应该使用 <code>computed</code><ul><li>因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</li></ul></li><li>当我们需要在<strong>数据变化</strong>时执行<strong>异步</strong>或<strong>开销较大</strong>的操作时，应该使用<code>watch</code>，<ul><li><code>watch</code>选项允许我们执行异步操作，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是<code>computed</code>无法做到的。</li></ul></li></ul></li></ul><h4 id="2-Vue能watch到数组和对象的变化吗"><a href="#2-Vue能watch到数组和对象的变化吗" class="headerlink" title="2. Vue能watch到数组和对象的变化吗"></a>2. Vue能watch到数组和对象的变化吗</h4><blockquote><p><code>Vue.set()</code>：将对象/数组添加到<strong>响应式系统</strong></p></blockquote><ul><li><p>对象：</p><ul><li>通过<code>obj.xx = &#39;xx&#39;</code>的方式修改<ul><li>已定义属性：页面响应，但无法监测到</li><li>未定义属性：页面不响应，且无法监测</li></ul></li><li>通过<code>Vue.set</code>或<code>vm.$set</code>的方式修改<ul><li>已定义属性：页面响应，但无法监测到<ul><li>解决方式：在<code>watch</code>中设置<code>deep:true</code></li></ul></li><li><strong>未定义</strong>属性：页面响应，且可以监测</li></ul></li></ul></li><li><p>同理：删除属性用<code>Vue.delete</code>或<code>vm.$delete</code></p></li></ul><ul><li><p>数组</p><ul><li>通过<code>arr[index]=&#39;xx&#39;</code>的方式修改<ul><li>页面不响应，且无法监测</li></ul></li><li>通过数组的<strong>方法</strong>，如<code>splice</code>、<code>push</code>等<ul><li>页面响应，且可以监测到</li></ul></li><li>通过<strong><code>Vue.set</code></strong>或<code>vm.$set</code>修改<ul><li>页面响应，且可以监测到</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123;obj.title&#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h1&gt;&#123;&#123;arr[0]&#125;&#125;&lt;/</span>h1&gt;</span><br><span class="line">        &lt;button @click=<span class="string">"changeObj"</span>&gt;修改obj.title&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button @click="changeArr"&gt;修改arr[0]&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        const app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">            el:'#app',</span></span><br><span class="line"><span class="regexp">            data: &#123;</span></span><br><span class="line"><span class="regexp">                obj:&#123;title:'Hello Vue'&#125;,</span></span><br><span class="line"><span class="regexp">                arr:[5467]</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            watch:&#123;</span></span><br><span class="line"><span class="regexp">                obj()&#123;</span></span><br><span class="line"><span class="regexp">                    console.log('obj change');</span></span><br><span class="line"><span class="regexp">                &#125;,</span></span><br><span class="line"><span class="regexp">                arr()&#123;</span></span><br><span class="line"><span class="regexp">                    console.log('arr change');</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            methods:&#123;</span></span><br><span class="line"><span class="regexp">                changeObj()&#123;</span></span><br><span class="line"><span class="regexp">                    this.obj.title = 'Hello React';  /</span><span class="regexp">/页面能响应，但无法监测到</span></span><br><span class="line"><span class="regexp">                &#125;,</span></span><br><span class="line"><span class="regexp">                changeArr()&#123;</span></span><br><span class="line"><span class="regexp">                    this.arr[0] = 666;/</span><span class="regexp">/页面中无法响应，且无法监测到</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码改进</span></span><br><span class="line">    watch: &#123;</span><br><span class="line">        obj: &#123;</span><br><span class="line">            handler(newV,oldV)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'obj change'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            deep:<span class="literal">true</span>   <span class="comment">// &lt;= 监听对象属性的变化</span></span><br><span class="line">        &#125;,</span><br><span class="line">        arr: <span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="string">'arr change'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        changeObj() &#123;</span><br><span class="line">            <span class="comment">//对象中修改属性：</span></span><br><span class="line">            <span class="comment">//this.obj.title = 'Hello React'; 两种均可，推荐下面一种</span></span><br><span class="line">            Vue.set(<span class="keyword">this</span>.obj, <span class="string">'title'</span>, <span class="string">'Hello React'</span>); <span class="comment">//通过Vue.set()向响应式对象上添加新属性</span></span><br><span class="line">            <span class="comment">//如果要给对象添加'新属性'，则必须使用Vue.set或vm.$set</span></span><br><span class="line">        &#125;,</span><br><span class="line">        changeArr() &#123;</span><br><span class="line">            Vue.set(<span class="keyword">this</span>.arr,<span class="number">0</span>,<span class="number">666</span>);  <span class="comment">//通过Vue.set()向响应式数组上添加新属性</span></span><br><span class="line">            <span class="comment">//或app.$set(this.arr,0,666)  Vue.set的别名</span></span><br><span class="line">            <span class="comment">//或app.arr.splice(0,1,666)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>在Vue的文档中有说明：为了发现<strong>对象</strong>内部值的变化，可以在选项参数中指定 <code>deep: true</code> 。注意监听<strong>数组</strong>的变动不需要这么做。</p></blockquote><h4 id="3-vue-router路由模式有几种"><a href="#3-vue-router路由模式有几种" class="headerlink" title="3.vue-router路由模式有几种"></a>3.vue-router路由模式有几种</h4><ol><li><code>hash</code> 使用 URL hash 值来作路由。支持所有浏览器；</li><li><code>history</code>  依赖 HTML5 History API 和服务器配置。</li><li><code>abstract</code> 支</li><li>持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue&quot;&gt;&lt;a href=&quot;#Vue&quot; class=&quot;headerlink&quot; title=&quot;Vue&quot;&gt;&lt;/a&gt;Vue&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对vue的理解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;v-if&lt;/code&gt;和&lt;cod
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>浏览器面试题</title>
    <link href="https://turing5467.github.io/2020/01/14/%E9%9D%A2%E8%AF%95/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>https://turing5467.github.io/2020/01/14/面试/浏览器/</id>
    <published>2020-01-13T16:00:00.000Z</published>
    <updated>2020-04-17T09:00:15.629Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-同源策略与跨域"><a href="#1-同源策略与跨域" class="headerlink" title="1. 同源策略与跨域"></a>1. 同源策略与跨域</h5><ul><li><p><strong>同源策略</strong>：一段脚本只能读取来自于<strong>同一来源</strong>的窗口和文档的属性，这里的同一来源指的是<strong>主机名、协 议和端口号</strong>的组合</p></li><li><p><strong>跨域</strong>并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果<strong>被浏览器拦截</strong>了。   </p></li><li><p>解决方案</p><ol><li>JSONP</li><li>CORS</li><li>postMessage</li><li>WebSocket</li><li>node中间件代理</li><li>nginx反向代理</li></ol></li></ul><h5 id="2-Cookie、LocalStorage、SessionStorage"><a href="#2-Cookie、LocalStorage、SessionStorage" class="headerlink" title="2. Cookie、LocalStorage、SessionStorage"></a>2. Cookie、LocalStorage、SessionStorage</h5><table><thead><tr><th>分类</th><th>生命周期</th><th>存储容量</th><th>存储位置</th></tr></thead><tbody><tr><td>cookie</td><td>默认保存在内存中，随浏览器关闭失效（如果设置过期时间，则在到过期时间后失效）</td><td>4KB</td><td>保存在客户端，<strong>每次请求时都会带上</strong></td></tr><tr><td>localStorage</td><td>理论上永久有效的，除非主动清除。</td><td>4.98MB（不同浏览器情况不同，safari 2.49M）</td><td>保存在客户端，不与服务端交互。<strong>节省网络流量</strong></td></tr><tr><td>sessionStorage</td><td>仅在当前网页会话下有效</td><td>4.98MB（部分浏览器没有限制）</td><td>同上</td></tr></tbody></table><h5 id="3-从输入-url-到展示的过程"><a href="#3-从输入-url-到展示的过程" class="headerlink" title="3.从输入 url 到展示的过程"></a>3.从输入 url 到展示的过程</h5><ul><li>DNS 解析</li><li>TCP 三次握手</li><li>发送请求，分析 url，设置请求报文(头，主体)</li><li>服务器返回请求的文件 (html)</li><li>浏览器渲染 <ul><li>HTML parser –&gt; DOM Tree <ul><li>标记化算法，进行元素状态的标记</li><li>dom 树构建</li></ul></li><li>CSS parser –&gt; Style Tree <ul><li>解析 css 代码，生成样式树</li></ul></li><li>attachment –&gt; Render Tree <ul><li>结合 dom树 与 style树，生成渲染树</li></ul></li><li>layout: 布局</li><li>GPU painting: 像素绘制页面</li></ul></li></ul><h5 id="4-浏览器内核"><a href="#4-浏览器内核" class="headerlink" title="4.浏览器内核"></a>4.浏览器内核</h5><ul><li><p>浏览器内核是浏览器的核心，也称“<strong>渲染引擎</strong>”，用来解释网页语法并渲染到网页上。浏览器内核决定了浏览器该如何显示网页内容以及页面的格式信息。不同的浏览器内核对网页的语法解释也不同，因此网页开发者需要在不同内核的浏览器中测试网页的渲染效果。</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200417170006619.png" alt="image-20200417170006619"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;1-同源策略与跨域&quot;&gt;&lt;a href=&quot;#1-同源策略与跨域&quot; class=&quot;headerlink&quot; title=&quot;1. 同源策略与跨域&quot;&gt;&lt;/a&gt;1. 同源策略与跨域&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;同源策略&lt;/strong&gt;：一段脚本只能读取来
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>移动端布局</title>
    <link href="https://turing5467.github.io/2019/12/26/html-css/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80/"/>
    <id>https://turing5467.github.io/2019/12/26/html-css/移动端布局/</id>
    <published>2019-12-25T16:00:00.000Z</published>
    <updated>2020-03-26T06:13:54.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="移动端布局"><a href="#移动端布局" class="headerlink" title="移动端布局"></a>移动端布局</h2><ul><li>物理像素：设备能控制显示的最小单元</li><li>设备独立像素：可以认为是计算系统坐标中的一个点，这个点代表了一个可以由程序使用并控制的虚拟像素，然后由相关系统转化成物理像素</li><li>dpr：设备像素比，物理像素/设备独立像素。iphone6下，dpr=2</li><li>ppi：一英寸显示屏上的像素点个数</li><li>dpi：打印机在单位面积上打印的墨点数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 保证在移动端设备中，页面宽度与屏幕宽度相等 --&gt;</span></span><br></pre></td></tr></table></figure><ol><li>百分比布局</li><li>rem布局</li><li>vw</li><li>Media Query</li></ol><h3 id="百分比布局"><a href="#百分比布局" class="headerlink" title="百分比布局"></a>百分比布局</h3><ul><li><p>所有需要动态调整的元素宽高采用百分比，字号固定像素</p></li><li><p>问题</p><ul><li>由于文字固定大小，文字占位在不同设备中不尽相同</li></ul></li></ul><h3 id="rem布局"><a href="#rem布局" class="headerlink" title="rem布局"></a>rem布局</h3><ul><li><p>通过计算或者JS获取 设备像素/CSS像素 的比例，确定<strong>根元素的字体像素</strong>，然后所有单位根据根元素字体像素进行rem设置。</p></li><li><p>阿里的lib-flexible解决方案实际上就是利用了这个方式，通过给<code>html</code>标签绑定<code>font-size</code>和<code>data-dpr</code>来进行页面的适配</p><ul><li><p>方案将整个页面宽度分成100份，则每10个单位宽度作为1rem</p></li><li><p>假设设计稿为750px的，那么1rem代表75px，每次转换时只需要将设计稿的像素值/75 就可以得到相应的rem值</p></li><li><p>由于每个设备的可视宽度不同，所以根节点的字体大小是不固定的，需要通过<code>document.documentElement.style.fontSize = window.innerWidth/10 + &#39;px&#39;</code></p></li><li><p>然后写页面代码时只需要将 原始像素值/基准值 就能得到对应的rem值</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@function</span> px2rem($px)</span><br><span class="line">    <span class="variable">@return</span> ($px / $unit-px) * <span class="number">1rem</span></span><br></pre></td></tr></table></figure></li><li><p>接着进行文字大小适配</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@mixin</span> font-dpr($font-size)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="vw布局"><a href="#vw布局" class="headerlink" title="vw布局"></a>vw布局</h3><ul><li>100vw = 当前设备的可见视口宽度</li></ul><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><ul><li>通过断点来进行不同宽度区间的设备样式适配</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;移动端布局&quot;&gt;&lt;a href=&quot;#移动端布局&quot; class=&quot;headerlink&quot; title=&quot;移动端布局&quot;&gt;&lt;/a&gt;移动端布局&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;物理像素：设备能控制显示的最小单元&lt;/li&gt;
&lt;li&gt;设备独立像素：可以认为是计算系统坐标中的一个点，这
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://turing5467.github.io/2019/12/24/%E9%9D%A2%E8%AF%95/js/"/>
    <id>https://turing5467.github.io/2019/12/24/面试/js/</id>
    <published>2019-12-24T07:33:16.739Z</published>
    <updated>2020-03-04T11:45:53.984Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><h5 id="1-闭包是什么"><a href="#1-闭包是什么" class="headerlink" title="1. 闭包是什么"></a>1. 闭包是什么</h5><ul><li>闭包是基于词法作用域书写代码时所产生的自然结果，它的创建和使用在代码中随处可见</li><li>当函数可以记住并访问所在的<strong>词法作用域</strong>时,就产生了<strong>闭包</strong>,即使函数是在当前词法作用域之外执行   </li><li>特点<ol><li>闭包可以访问<strong>外部函数</strong>中定义的变量，即使外部函数已经执行完毕</li><li>闭包还可以访问<strong>外部函数</strong>中定义的<strong>形参</strong>(理论上来说属于第一点)</li><li>闭包可以访问<strong>外部块</strong>中定义的变量，即使外部块已经执行完毕</li></ol></li></ul><blockquote><p>  <strong>词法作用域</strong>是由你在<strong>写代码</strong>时将变量和块作用域写在哪里来决定的   </p></blockquote><ul><li>缺点：滥用闭包会在成内存泄漏，因为闭包中引用到的包裹函数中定义的变量永远不会被释放，所以我们应该在必要的时候，及时释放这个闭包函数</li></ul><h5 id="2-apply和call的区别"><a href="#2-apply和call的区别" class="headerlink" title="2. apply和call的区别"></a>2. apply和call的区别</h5><ul><li><p>共同点：都是借用了一个原本不属于一个对象的方法，让当前对象使用</p></li><li><p>传参方式</p><ol><li><code>call</code>：待调用函数的参数以第2, 3, 4, … n,个参数的形式传递给call</li><li><code>apply</code>：待调用函数的参数以<strong>数组</strong>形式传递给apply的第二个参数</li></ol></li><li><p>形参个数</p><ol><li><code>call.length == 1</code></li><li><code>apply.length == 2</code></li></ol></li><li><p>使用场景</p><ul><li><strong>参数数量/顺序</strong>确定就用<code>call</code>，参数数量/顺序不确定的话就用apply。</li><li>考虑可读性：参数<strong>数量</strong>不多就用<code>call</code>，参数数量比较多的话，把参数整合成数组，使用apply。</li><li>参数集合已经是一个数组的情况，用<code>apply</code>，比如获取数组最大值/最小值。</li></ul></li></ul><h5 id="3-原型和原型链"><a href="#3-原型和原型链" class="headerlink" title="3. 原型和原型链"></a>3. 原型和原型链</h5><ul><li><p>原型：  <strong>构造函数</strong>在创建的过程中，系统自动创建出来与构造函数相关联的一个空的对象。可以由<code>构造函数.prototype</code>来访问到。   </p></li><li><p>每个对象拥有一个原型对象，通过 <strong><strong>proto</strong></strong> 指针指向上一个原型 ，并从中继承方法和属性，同时原型对象也可能拥有原型，这样一层一层，最终指向 null。这种关系被称为<strong>原型链 (prototype chain)</strong>，通过原型链一个对象会拥有定义在其他对象中的属性和方法。    </p></li></ul><blockquote><p>补充：</p><ul><li><p><code>__proto__</code>是每个<strong>实例</strong>上都有的属性，指向<strong>自身构造函数</strong>的原型对象   </p></li><li><p><code>constructor</code>属性是<strong>原型对象</strong>的属性，指向这个原型对象所对应的构造函数。 </p></li></ul></blockquote><h5 id="4-new运算符的执行过程"><a href="#4-new运算符的执行过程" class="headerlink" title="4. new运算符的执行过程"></a>4. new运算符的执行过程</h5><ul><li>新生成一个对象</li><li>链接到原型: <code>obj.__proto__ = Con.prototype</code></li><li>绑定this: <code>apply</code></li><li>返回新对象(如果构造函数有自己 retrun 时，则返回该值)</li></ul><h5 id="5-对象的拷贝"><a href="#5-对象的拷贝" class="headerlink" title="5.对象的拷贝"></a>5.对象的拷贝</h5><ul><li><p>浅拷贝：以复制的形式拷贝引用对象，仍指向同一个地址，修改时原对象也会受到影响</p><ul><li><code>Object.assign</code></li><li>展开运算符(…)</li></ul></li><li><p>深拷贝：完全拷贝一个新对象，修改时原对象不再受到任何影</p><ul><li><p><code>JSON.parse(JSON.stringify(obj))</code>: 性能最快</p><ul><li>具有循环引用的对象时，报错</li><li>当值为函数、<code>undefined</code>、或<code>symbol</code>时，无法拷贝</li></ul></li><li><p>递归进行逐一赋值</p></li></ul></li></ul><h5 id="6-函数柯里化"><a href="#6-函数柯里化" class="headerlink" title="6.函数柯里化"></a>6.函数柯里化</h5><ul><li><p>在一个函数中，首先填充几个参数，然后返回一个新的函数的技术，称为函数的柯里化。</p></li><li><p>通常可用于在不侵入函数的前提下，为函数 <strong>预置通用参数</strong>，供多次重复调用。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add1 = add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add1(<span class="number">2</span>) === <span class="number">3</span></span><br><span class="line">add1(<span class="number">20</span>) === <span class="number">21</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><h5 id="1-let和const"><a href="#1-let和const" class="headerlink" title="1. let和const"></a>1. let和const</h5><ol><li><p>共同点</p><ul><li>块级作用域有效</li><li>不存在变量提升(暂时性死区TDZ)</li><li>不允许重复声明</li></ul></li><li><p>const</p><ul><li><p>一旦声明，就不能改变，且必须立即初始化</p></li><li><p>对于<strong>复合类型的变量</strong>，变量指向数据所在的<strong>地址</strong>。 const 命令只保证变量名指向的<strong>地址</strong>不变，并不保证该地址的数据不变。</p></li></ul></li></ol><h5 id="2-Promise"><a href="#2-Promise" class="headerlink" title="2. Promise"></a>2. Promise</h5><h4 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h4><h5 id="1-GET和POST的区别"><a href="#1-GET和POST的区别" class="headerlink" title="1.GET和POST的区别"></a>1.GET和POST的区别</h5><ul><li>get: 缓存、请求长度受限、会被历史保存记录<br>无副作用(不修改资源)，幂等(请求次数与资源无关)的场景</li><li>post: 安全、大数据、更多编码类型<img src="https://user-gold-cdn.xitu.io/2019/2/14/168e9d9050b9d08a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"> </li></ul><h4 id="纯JS代码题"><a href="#纯JS代码题" class="headerlink" title="纯JS代码题"></a>纯JS代码题</h4><h5 id="1-数组去重"><a href="#1-数组去重" class="headerlink" title="1. 数组去重"></a>1. 数组去重</h5><ol><li><p>双重循环：笨重，时间复杂度为O(n^2)</p></li><li><p>indexOf方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.indexOf(arr[i]) === <span class="number">-1</span>) &#123;</span><br><span class="line">            res.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>排序 + 相邻元素去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    arr = arr.sort()</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] !== arr[i<span class="number">-1</span>]) &#123;</span><br><span class="line">            res.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>reduce</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sort().reduce(<span class="function">(<span class="params">init, current</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="keyword">if</span>(init.length === <span class="number">0</span> || init[init.length - <span class="number">1</span>] !== current)&#123; </span><br><span class="line">            init.push(current); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> init; </span><br><span class="line">    &#125;, []); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Set与解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">    <span class="comment">//或解构</span></span><br><span class="line">    <span class="comment">//return [...new Set(arr)]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="2-防抖和节流"><a href="#2-防抖和节流" class="headerlink" title="2. 防抖和节流"></a>2. 防抖和节流</h5><ul><li><p><strong>防抖</strong>：任务频繁触发的情况下，只有任务触发的<strong>间隔超过指定时间</strong>的时候，任务才会执行。 </p><ul><li><p>即：短时间内多次触发某一任务，只会执行<strong>最后一次</strong>触发  </p></li><li><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            fn.call(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用场景： 用户输入，只需再输入完成后做一次输入校验即可。 </p></li></ul></li><li><p><strong>实：现节流</strong>：指定时间间隔内只会执行一次任务</p><ul><li><p>应用：监听滚动条位置</p></li><li><p>代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> canRun = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!canRun) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        canRun = <span class="literal">false</span>;</span><br><span class="line">        setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            fn.call(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            canRun = <span class="literal">true</span>;</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;h4 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h4&gt;&lt;h5 id=&quot;1-闭包是什么&quot;&gt;&lt;a href=&quot;#1-闭包是什么&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://turing5467.github.io/2019/12/19/%E9%9D%A2%E8%AF%95/HTML-CSS/"/>
    <id>https://turing5467.github.io/2019/12/19/面试/HTML-CSS/</id>
    <published>2019-12-19T02:32:45.709Z</published>
    <updated>2020-04-17T09:20:41.327Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>浏览器内核</p><ul><li>IE:  <strong>trident</strong>（新版已改用chrome的Blink内核）</li><li>Firefox：<strong>gecko</strong> 内核 </li><li>Safari：<strong>webkit</strong> 内核 </li><li>Opera：以前是 <strong>presto</strong> 内核，现已改用 Chrome 的 <strong>Blink</strong> 内核 </li><li>Chrome：<strong>Blink</strong> (基于 webkit，Google 与 Opera Software 共同开发)</li></ul></li></ol><ol start="2"><li><p>DocType是干什么的</p><p> <code>&lt;!DOCTYPE&gt;</code>用于告知浏览器使用哪种HTML或XHTML<strong>规范</strong>来渲染文档</p></li></ol><ol start="3"><li><p><strong>移动端布局</strong></p><ol><li>百分比布局</li><li>rem布局</li><li>vw布局</li></ol></li></ol><ol start="4"><li><p>渐进增强和优雅降级</p><p><strong>渐进增强</strong>：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p><p><strong>优雅降级</strong>：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容</p></li></ol><ol start="5"><li><p><strong>src</strong>与<strong>href</strong>的区别</p><ul><li>src：指向外部资源的位置，用于替换当前元素<ul><li>当浏览器解析到该元素时，会<strong>暂停</strong>其他资源的下载和处理，直到将该资源加载、编译、执行完毕</li></ul></li><li>href：用于在当前文档和引用资源之间确立联系<ul><li>当浏览器解析到该元素时，会<strong>并行</strong>下载资源并且不会停止对当前文档的处理</li></ul></li></ul></li><li></li><li><p>rgba和opacity的透明效果</p><ul><li>rgba：只作用于元素的颜色或背景色</li><li>opacity：作用于元素，以及元素内所有内容的透明度</li></ul></li></ol><ol start="8"><li><p>Sass和Less</p><p>他们是CSS预处理器。是CSS上的一种抽象层，通过一种特殊的语法编译成CSS</p><p>理由：</p><pre><code>1. 结构清晰，便于扩展2. 轻松实现多重继承</code></pre></li></ol><ol start="9"><li><p>为什么要初始化样式？</p><p>由于浏览器兼容的问题，不同的浏览器对标签的默认样式值不同，若不初始化则会造成不同浏览器之间的显示差异</p></li></ol><ol start="10"><li><p><strong>BFC</strong>是什么</p><ul><li><p>BFC：块级格式化上下文</p><p>​    它是一个独立的渲染区域，该区域内所有元素的布局不会影响到区域外部元素的布局，这个渲染区域只对<strong>块级元素</strong>起作用。</p></li><li><p>布局规则</p><ul><li>属于同一BFC的的两个相邻box的垂直方向上的margin会发生重叠 </li><li>BFC区域不会与浮动的元素重叠</li><li>计算BFC高度时,浮动元素也参与计算 </li></ul></li><li><p>如何开启BFC</p><ul><li><code>float: left/right</code></li><li><code>position: absolute/fixed</code></li><li><code>display: inline-block/table-cell/flex/inline-flex</code></li><li><code>overflow: hidden/auto/scroll</code><ul><li>ie6: <code>zoom: 1</code></li></ul></li></ul></li><li><p>应用</p><ul><li><p>自适应两栏布局（2）</p></li><li><p>清除内部浮动（3）</p></li><li><p>防止垂直margin重叠 （1）</p><blockquote><p>折叠结果遵循下列计算规则： </p><ol><li><p>两个相邻的外边距都是正数时，折叠结果是它们两者之间<strong>较大的值</strong>。 </p></li><li><p>两个相邻的外边距都是负数时，折叠结果是两者<strong>绝对值的较大值</strong>。 </p></li><li><p>两个外边距一正一负时，折叠结果是两者的<strong>相加的和</strong>。 </p></li></ol></blockquote></li></ul></li></ul></li><li><p>HTML常见兼容性问题</p><ol><li>IE6双边距 BUG： float 引起 =&gt;  使用 <code>display : inline</code></li></ol></li><li><p>ie8以下图片边框bug：图片为a标签 =&gt; <code>border: 0 none;</code></p><ol start="3"><li>div中图片下方撑大3px：<code>div { font-size:0 }</code></li></ol></li><li><p>ie6部分块元素拥有默认高16px：<code>font-size:0</code></p><ol start="5"><li>表单行高对齐不一致：<code>float: left</code>或<code>vertical-align: middle</code></li></ol></li><li><p>各浏览器按钮大小不一样：用a标签模拟</p><ol start="7"><li>ie6百分比bug 50+50&gt;100：<code>.right { clear: right }</code></li></ol></li><li><p>select 在 ie6 下遮盖 使用 iframe 嵌套 </p><ol start="9"><li><p>为 什 么 没 有 办 法 定 义 1px 左 右 的 宽 度 容 器 （ IE6 默 认 的 行 高 造 成 的 ， 使 用 </p><p><code>overflow:hidden,zoom:0.08 line-height:1px</code>） </p></li><li><p>IE5-8 不支持 opacity，解决办法： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.opacity</span> &#123; </span><br><span class="line">     <span class="attribute">opacity</span>: <span class="number">0.4</span> </span><br><span class="line"> filter: <span class="built_in">alpha</span>(opacity=60); <span class="comment">/* for IE5-7 */</span> </span><br><span class="line">     <span class="attribute">-ms-filter</span>: <span class="string">"progid:DXImageTransform.Microsoft.Alpha(Opacity=60)"</span>; <span class="comment">/* for IE8*/</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><pre><code>10. IE6 不支持 PNG 透明背景，解决办法: IE6 下使用 gif 图片11. margin塌陷(margin-top转移至父元素)：父或子设置浮动   或   父：`overflow: hidden`</code></pre><h3 id="纯CSS面试题"><a href="#纯CSS面试题" class="headerlink" title="纯CSS面试题"></a>纯CSS面试题</h3><ol><li>单行和多行文本溢出</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//单行文本溢出...</span><br><span class="line"><span class="selector-class">.inoneline</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden ;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//多行文本溢出</span><br><span class="line"><span class="selector-class">.intwoline</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">overfLow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">word-break</span>: break-all;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">    -webkit-line clamp: 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>居中问题（参考文章：）</li></ol><h3 id="知识盲区"><a href="#知识盲区" class="headerlink" title="知识盲区"></a>知识盲区</h3><p><strong>1、为什么利用多个域名来存储网站资源会更有效？</strong>  </p><p>​    CDN 缓存更方便 </p><p>​    突破浏览器并发限制 </p><p>​    节约 cookie 带宽 </p><p>​    节约主域名的连接数，优化页面响应速度 </p><p>​    防止不必要的安全问题</p><p><strong>2、知道的网页制作会用到的图片格式有哪些？</strong>  </p><p>png-8，png-24，jpeg，gif，svg。 </p><p>但是上面的那些都不是面试官想要的最后答案。面试官希望听到是 Webp。（是否有关注新 </p><p>技术，新鲜事物）科普一下 Webp：WebP 格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。 </p><p>图片压缩体积大约只有 JPEG 的 2/3，并能节省大量的服务器带宽资源和数据空间。Facebook  </p><p>Ebay 等知名网站已经开始测试并使用 WebP 格式。 </p><p>在质量相同的情况下，WebP 格式图像的体积要比 JPEG 格式图像小 40% </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;浏览器内核&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IE:  &lt;strong&gt;trident&lt;/strong&gt;（新版已改用chrome的Blink内核）&lt;/li&gt;
&lt;li&gt;Firefox：&lt;strong&gt;gecko&lt;/strong&gt; 内核 &lt;/li&gt;
&lt;li&gt;Safar
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>微信小程序</title>
    <link href="https://turing5467.github.io/2019/12/10/js%E6%A1%86%E6%9E%B6/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>https://turing5467.github.io/2019/12/10/js框架/微信小程序/</id>
    <published>2019-12-09T16:00:00.000Z</published>
    <updated>2020-04-17T07:39:55.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><ul><li><p>微信小程序是腾讯于2017年1月9日推出的一种不需要下载安装即可在微信平台上使用的应用，主要提供给企业、政府、媒体、其他组织或 个人的开发者</p></li><li><p>本质与微信的原生功能应用是一样的–都是Web APP</p></li><li><p>优势</p><ol><li>开发适配成本低(推广APP的成本过高)</li><li>微信有海量用户，且粘性很高，在微信里开发产品更容易触达用户</li><li>容易小规模试错，然后快速迭代</li><li>跨平台</li></ol></li><li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html" target="_blank" rel="noopener">文档</a></p></li></ul><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ol><li><p>注册账号：<a href="https://mp.weixin.qq.com/cgi-bin/registermidpage?action=index&lang=zh_CN&token=" target="_blank" rel="noopener">链接</a></p></li><li><p>获取APPId：<img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191210153423531.png" alt="image-20191210153423531"></p></li></ol><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191210153456694.png" alt="image-20191210153456694"></p><ol start="3"><li><p>开发工具：微信自己的微信开发者工具：<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">地址</a></p></li><li><p>调试页面</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191210160627943.png" alt="image-20191210160627943"></p></li></ol><h3 id="结构目录"><a href="#结构目录" class="headerlink" title="结构目录"></a>结构目录</h3><h4 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h4><table><thead><tr><th></th><th>传统web</th><th>小程序</th></tr></thead><tbody><tr><td>结构</td><td>HTML</td><td>WXML</td></tr><tr><td>表现</td><td>CSS</td><td>WXSS</td></tr><tr><td>行为</td><td>JS</td><td>JS</td></tr><tr><td>配置</td><td>无</td><td>3JSON</td></tr></tbody></table><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pages/</span><br><span class="line">index/</span><br><span class="line">index.wxml</span><br><span class="line">index.wxss</span><br><span class="line">index.js</span><br><span class="line"><span class="built_in">log</span>/</span><br><span class="line">log.wxml</span><br><span class="line">log.wxss</span><br><span class="line">log.js</span><br><span class="line">log.json//<span class="built_in">log</span>页面相关配置</span><br><span class="line">utils///工具函数</span><br><span class="line">app.js//入口文件 </span><br><span class="line">app.json//小程序相关配置(如标题)</span><br><span class="line">app.wxss//全局样式</span><br><span class="line">project.config.json//开发者相关配置(类似于node的package.json)</span><br></pre></td></tr></table></figure><h4 id="app-json"><a href="#app-json" class="headerlink" title="app.json"></a>app.json</h4><ul><li><p>当前小程序的全局配置，包括小程序的所有页面路径、界面表现、网络超时时间，底部Tab。</p></li><li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html" target="_blank" rel="noopener">文档</a></p></li><li><p>常用字段</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"pages"</span>: [//用于制定法小程序由哪些页面组成</span><br><span class="line">        <span class="string">"pages/index/index"</span>,//第一项代表小程序的初始页面</span><br><span class="line">        <span class="string">"pages/log/log"</span>//通过修改pages数组，增加/减少页面</span><br><span class="line">    ],</span><br><span class="line">    "window": &#123;//用于设置小程序的状态栏、导航条、标题、窗口背景色。</span><br><span class="line">        "navigationBarBackgroundColor": "light",</span><br><span class="line">        "navigationBarTitleText": "标题"</span><br><span class="line">    &#125;,</span><br><span class="line">    "tabBar": &#123;//tab栏的表现</span><br><span class="line">        "color": "#000",</span><br><span class="line">        "selectedColor": "#f23030",</span><br><span class="line">        "list": [//最少2个，最多5个tab</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"pagePath"</span>: <span class="string">"pages/index/index"</span>,</span><br><span class="line">                <span class="attr">"text"</span>: <span class="string">"首页"</span>,</span><br><span class="line">                <span class="attr">"iconPath"</span>: <span class="string">"icons/index.png"</span>,</span><br><span class="line">                <span class="attr">"selectedIconPath"</span>: <span class="string">"icons/index_active.png"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            //...</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="json"><a href="#json" class="headerlink" title=".json"></a>.json</h4><ul><li><p><strong>每个页面</strong>独立定义的一些属性，这些属性只能设置app.json中部分window配置项的内容</p></li><li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">文档</a></p></li></ul><h4 id="数据绑定-同React与Vue的综合"><a href="#数据绑定-同React与Vue的综合" class="headerlink" title="数据绑定(同React与Vue的综合)"></a>数据绑定(同React与Vue的综合)</h4><ul><li><p>wxml</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//index.wxml(无需引用js文件，直接使用变量)</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">&#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>=<span class="string">"&#123;&#123;false&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        msg: <span class="string">"Hello 小程序"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改数据：this.setData(&#123;&#125;)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>循环（数组或对象）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123;arr&#125;&#125;"</span> wx:key=<span class="string">"&#123;&#123;index&#125;&#125;"</span> &gt;</span><br><span class="line">&#123;&#123;index&#125;&#125; : &#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;!--</span><br><span class="line">    index: 索引值/属性名，可通过wx:<span class="keyword">for</span>-item修改变量名</span><br><span class="line">item: 属性值，可通过wx:<span class="keyword">for</span>-index修改变量名</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>条件渲染</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;view == 'WEBVIEW'&#125;&#125;"</span>&gt;</span> WEBVIEW <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;view == 'APP'&#125;&#125;"</span>&gt;</span> APP <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>=<span class="string">"&#123;&#123;view == 'MINA'&#125;&#125;"</span>&gt;</span> MINA <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>wxss</p><ul><li><p>引入外部样式：<code>@import &quot;相对路径/&quot;</code></p></li><li><p>内联样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">"background-color: yellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">"&#123;&#123;classObj&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>组件样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">view</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#194</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>不支持通配符</p></li><li><p>推荐使用flex布局</p></li></ul><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><ul><li><p><code>bindtap</code>：点击事件，默认参数为event</p></li><li><p><code>&#39;bind&#39;+&#39;xx&#39;</code>：对应冒泡事件</p></li><li><p><code>&#39;catch&#39;+&#39;xx&#39;</code>：对应非冒泡事件</p></li><li><p>传递参数：</p><ul><li>在标签中通过data-xx设置</li><li>在实践中通过<code>e.target.dataset.xx</code>获取数据</li></ul></li></ul><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><h4 id="小程序适配方案"><a href="#小程序适配方案" class="headerlink" title="小程序适配方案"></a>小程序适配方案</h4><ul><li><strong>rpx（responsive pixel</strong>）: 可以根据屏幕宽度进行<strong>自适应</strong>。</li><li>iphone6: 1rpx = 1物理像素 = 0.5px</li><li>换算方式<ol><li>以iphone6的物理像素个数为标准：750</li><li>1rpx = 目标设备宽度/750 px</li><li>注意此时底层已经做了viewport适配的处理，即实现了理想视口</li></ol></li></ul><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><blockquote><p>所有标签都必须闭合over</p></blockquote><h4 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h4><ul><li><p><code>&lt;view&gt;</code></p><ul><li><p><code>hover-class</code>属性指定<strong>按下</strong>时的样式类，为none时，为点击态效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view  class=&quot;nav-item &#123;&#123;index==curIndex?active:&quot;&quot;&#125;&#125;&quot; &gt;&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><code>&lt;scroll-view&gt;</code></p><ul><li><code>scroll-x</code></li></ul></li><li><p><code>&lt;text&gt;</code></p><ul><li><code>selectable</code> 文本是否可选</li><li><code>space</code>显示连续空格</li><li><code>decode</code>是否解码</li></ul></li><li><p><code>&lt;image&gt;</code>图片标签（默认320×240），是web中img标签和背景图片的结合体</p><ul><li><p><code>src</code></p></li><li><p><code>mode</code></p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200105151957519.png" alt="image-20200105151957519"></p></li><li><p><code>lazy-load</code></p></li></ul></li><li><p><code>&lt;block&gt;</code>渲染一个无包裹元素的结构快</p></li></ul><h4 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">autoplay</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span> <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"xx"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span> <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span> <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"xx"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span> <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>·<code>swiper</code><ul><li><code>autoplay</code>、<code>interval</code>、<code>duration</code>、<code>current</code></li><li><code>circular</code>是否采用衔接滑动(最后一张接到第一张)</li><li><code>indicator-dots</code>、<code>indicator-color</code>、<code>indicator-active-color</code></li></ul></li></ul><h4 id="导航组件"><a href="#导航组件" class="headerlink" title="导航组件"></a>导航组件</h4><ul><li><code>navigator</code><ul><li><code>target</code> 在哪个目标上发生跳转，默认当前小程序 <pre><code>- self</code></pre><ul><li><code>url</code> 当前小程序内的跳转链接 </li></ul></li><li><code>open-type</code> 跳转方式<pre><code>- navigate、redirect、     - switchTab、         - reLaunch、navigateBack、exit</code></pre></li></ul></li></ul><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><ul><li><code>&lt;video&gt;</code><ul><li>src、duration、autoplay、loop、muted</li></ul></li></ul><h4 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h4><ul><li><p>components文件夹 -&gt; 组建文件夹 -&gt; 输入组件名 -&gt; 自动生成四个对应文件</p></li><li><p>编写组件内容</p></li><li><p>引用组件：</p><ul><li><p>首先在页面中的json文件总进行引用声明，还要提供对应的组件名和路径</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"usingComponents"</span>: &#123;</span><br><span class="line">        //组件名：组件路径</span><br><span class="line">        "cpnName": "../../"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpnName</span>&gt;</span><span class="tag">&lt;/<span class="name">cpnName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.request(&#123;</span><br><span class="line">    url: <span class="string">''</span>,</span><br><span class="line">    success() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;微信小程序&quot;&gt;&lt;a href=&quot;#微信小程序&quot; class=&quot;headerlink&quot; title=&quot;微信小程序&quot;&gt;&lt;/a&gt;微信小程序&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;微信小程序是腾讯于2017年1月9日推出的一种不需要下载安装即可在微信平台上使用的应用，主要提供给
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>代码手写题</title>
    <link href="https://turing5467.github.io/2019/11/18/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E6%89%8B%E5%86%99%E9%A2%98/"/>
    <id>https://turing5467.github.io/2019/11/18/面试/代码手写题/</id>
    <published>2019-11-17T16:00:00.000Z</published>
    <updated>2019-11-25T13:19:40.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="comment">// 1、获得构造函数，同时删除 arguments 中第一个参数</span></span><br><span class="line">    <span class="keyword">var</span> Con = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 2、创建一个空的对象并链接到原型，obj 可以访问构造函数原型中的属性</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(Con.prototype);</span><br><span class="line">    <span class="comment">// 3、绑定 this 实现继承，obj 可以访问到构造函数中的属性</span></span><br><span class="line">    <span class="keyword">var</span> ret = Con.apply(obj,auguments);  </span><br><span class="line">    <span class="comment">// 4、优先返回构造函数返回的对象</span></span><br><span class="line">    <span class="keyword">return</span> ret <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? ret : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context, ...arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.判定上下文对象</span></span><br><span class="line">    <span class="keyword">if</span> (context === <span class="literal">null</span> || context === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        context = <span class="built_in">window</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        context = <span class="built_in">Object</span>(context) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> specialPrototype = <span class="built_in">Symbol</span>(<span class="string">'特殊属性Symbol'</span>); <span class="comment">// 用于临时储存函数(避免跟上下文对象的原属性冲突) (如果考虑兼容，可以使用特殊id)</span></span><br><span class="line">    context[specialPrototype] = <span class="keyword">this</span>; <span class="comment">// 将要调用の函数(this)绑定到context的特殊属性上</span></span><br><span class="line">    <span class="keyword">let</span> result = context[specialPrototype](...arr); <span class="comment">// 执行函数并传递参数</span></span><br><span class="line">    <span class="comment">//注：此时函数的调用者就已经是context了,bingo!</span></span><br><span class="line">    <span class="keyword">delete</span> context[specialPrototype]; <span class="comment">// 删除上下文对象的属性</span></span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">// 返回函数执行结果</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//伪数组判断</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayLike</span>(<span class="params">o</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">if</span> (o &amp;&amp; <span class="comment">// o不是null、undefined等        </span></span><br><span class="line">        <span class="keyword">typeof</span> o === <span class="string">'object'</span> &amp;&amp; <span class="comment">// o是对象        </span></span><br><span class="line">        <span class="built_in">isFinite</span>(o.length) &amp;&amp; <span class="comment">// o.length是有限数值        </span></span><br><span class="line">        o.length &gt;= <span class="number">0</span> &amp;&amp; <span class="comment">// o.length为非负值        </span></span><br><span class="line">        o.length === <span class="built_in">Math</span>.floor(o.length) &amp;&amp; <span class="comment">// o.length是整数        </span></span><br><span class="line">        o.length &lt; <span class="number">4294967296</span> <span class="comment">// o.length &lt; 2^32       </span></span><br><span class="line">       )     </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>    </span><br><span class="line">    <span class="keyword">else</span>        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;    </span><br><span class="line">    <span class="comment">//1.判定上下文对象</span></span><br><span class="line">    <span class="keyword">if</span> (context === <span class="literal">null</span> || context === <span class="literal">undefined</span>) &#123;        </span><br><span class="line">        context = <span class="built_in">window</span>     </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;        </span><br><span class="line">        context = <span class="built_in">Object</span>(context)</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">const</span> specialPrototype = <span class="built_in">Symbol</span>(<span class="string">'特殊属性Symbol'</span>)</span><br><span class="line">    context[specialPrototype] = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span>[<span class="number">1</span>]; <span class="comment">// 获取参数数组    </span></span><br><span class="line">    <span class="keyword">let</span> result    <span class="comment">// 处理传进来的第二个参数    </span></span><br><span class="line">    <span class="keyword">if</span> (args) &#123;        <span class="comment">// 是否传递第二个参数        </span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(args) &amp;&amp; !isArrayLike(args)) &#123;            </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'myApply 第二个参数不为数组并且不为类数组对象抛出错误'</span>);         &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">                args = <span class="built_in">Array</span>.prototype.slice.call(args) <span class="comment">// 伪数组转数组</span></span><br><span class="line">                result = context[specialPrototype](...args); <span class="comment">// 执行函数并传递参数</span></span><br><span class="line">        &#125;    </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;       </span><br><span class="line">        result = context[specialPrototype](); <span class="comment">// 执行函数    </span></span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">delete</span> context[specialPrototype]; <span class="comment">// 删除上下文对象的属性    </span></span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">// 返回函数执行结果</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">objThis, ...params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> thisFn = <span class="keyword">this</span>; <span class="comment">// 存储源函数以及上方的params</span></span><br><span class="line">    <span class="comment">// 对返回的函数 secondParams 二次传参</span></span><br><span class="line">    <span class="keyword">let</span> fToBind = <span class="function"><span class="keyword">function</span> (<span class="params">...secondParams</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'secondParams'</span>,secondParams,...secondParams)</span><br><span class="line">        <span class="keyword">const</span> isNew = <span class="keyword">this</span> <span class="keyword">instanceof</span> fToBind <span class="comment">// this是否是fToBind的实例 也就是返回的fToBind是否通过new调用</span></span><br><span class="line">        <span class="keyword">const</span> context = isNew ? <span class="keyword">this</span> : <span class="built_in">Object</span>(objThis) <span class="comment">// new调用就绑定到this上,否则就绑定到传入的objThis上</span></span><br><span class="line">        <span class="keyword">return</span> thisFn.call(context, ...params, ...secondParams); <span class="comment">// 用call调用源函数绑定this的指向并传递参数,返回执行结果</span></span><br><span class="line">    &#125;;</span><br><span class="line">    fToBind.prototype = <span class="built_in">Object</span>.create(thisFn.prototype); <span class="comment">// 复制源函数的prototype给fToBind</span></span><br><span class="line">    <span class="keyword">return</span> fToBind; <span class="comment">// 返回拷贝的函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;new&quot;&gt;&lt;a href=&quot;#new&quot; class=&quot;headerlink&quot; title=&quot;new&quot;&gt;&lt;/a&gt;new&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端面试题</title>
    <link href="https://turing5467.github.io/2019/11/15/%E9%9D%A2%E8%AF%95/interview/"/>
    <id>https://turing5467.github.io/2019/11/15/面试/interview/</id>
    <published>2019-11-14T16:00:00.000Z</published>
    <updated>2020-01-14T11:20:03.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端面试题"><a href="#前端面试题" class="headerlink" title="前端面试题"></a>前端面试题</h2><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><ul><li><p>对vue的理解</p></li><li></li><li><p><code>v-if</code>和<code>v-show</code>区别与优先级</p></li><li><p><code>v-for</code>为什么要有key</p></li><li><p><code>v-model</code>怎么用prop实现？</p></li><li><p><code>keep-alive</code>的好处</p></li><li><p>生命周期</p></li><li><p>在哪个生命周期发送网络请求</p></li><li><p>组件通信</p></li><li><p>兄弟传值</p></li><li><p>底层原理</p></li></ul><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><ul><li>Vuex的五大属性</li><li>对Vuex的理解</li><li>使用场景</li></ul><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端面试题&quot;&gt;&lt;a href=&quot;#前端面试题&quot; class=&quot;headerlink&quot; title=&quot;前端面试题&quot;&gt;&lt;/a&gt;前端面试题&lt;/h2&gt;&lt;h2 id=&quot;Vue&quot;&gt;&lt;a href=&quot;#Vue&quot; class=&quot;headerlink&quot; title=&quot;Vue&quot;&gt;&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>styled-components</title>
    <link href="https://turing5467.github.io/2019/11/11/%E5%85%B6%E4%BB%96/styled-components/"/>
    <id>https://turing5467.github.io/2019/11/11/其他/styled-components/</id>
    <published>2019-11-10T16:00:00.000Z</published>
    <updated>2019-11-11T03:57:55.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="styled-components"><a href="#styled-components" class="headerlink" title="styled-components"></a>styled-components</h2><ul><li><code>npm i --save styled-components</code></li></ul><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component,Fragment&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">//引入styled-components</span></span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改了div的样式</span></span><br><span class="line"><span class="keyword">const</span> Title = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  font-size:1.5rem;</span></span><br><span class="line"><span class="string">  color:red</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    &lt;Title&gt;大红牛&lt;<span class="regexp">/Title&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><p>运行结果： <img src="https://ftp.bmp.ovh/imgs/2019/11/fcc29f199c13f148.png" alt> </p><h3 id="塑造组件"><a href="#塑造组件" class="headerlink" title="塑造组件"></a>塑造组件</h3><ul><li>在已定义好的组件上进二次样式的修改</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component,Fragment&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">//引入styled-components</span></span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始组件</span></span><br><span class="line"><span class="keyword">const</span> Button = styled.button<span class="string">`</span></span><br><span class="line"><span class="string">    color: palevioletred;</span></span><br><span class="line"><span class="string">    font-size: 1em;</span></span><br><span class="line"><span class="string">    margin: 1em;</span></span><br><span class="line"><span class="string">    padding: 0.25em 1em;</span></span><br><span class="line"><span class="string">    border: 2px solid palevioletred;</span></span><br><span class="line"><span class="string">    border-radius: 3px;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="comment">//二次修饰</span></span><br><span class="line"><span class="keyword">const</span> YellowButton = styled(Button)<span class="string">`</span></span><br><span class="line"><span class="string">  background-color:yellow</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Fragment&gt;</span><br><span class="line">          &lt;Button&gt;FPX牛逼&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">          &lt;YellowButton&gt;小天牛逼&lt;/</span>YellowButton&gt;</span><br><span class="line">        &lt;<span class="regexp">/Fragment&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><p>运行结果 <img src="https://ftp.bmp.ovh/imgs/2019/11/93396ce7cda1ebfd.png" alt> </p><h3 id="传递props"><a href="#传递props" class="headerlink" title="传递props"></a>传递props</h3><ul><li><code>props</code>必须通过<code>props =&gt; props.xx</code>的方式获取</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = styled.h1<span class="string">`</span></span><br><span class="line"><span class="string">    color: <span class="subst">$&#123;props =&gt; props.color&#125;</span>;</span></span><br><span class="line"><span class="string">    font-size: 1em;</span></span><br><span class="line"><span class="string">    padding: 0.25em 1em;</span></span><br><span class="line"><span class="string">    text-decoration: underline;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Button color=<span class="string">"#194"</span>&gt;FPX牛逼&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果： <img src="https://ftp.bmp.ovh/imgs/2019/11/f398565291a8163b.png" alt> </p><h3 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = styled.h1.attrs(&#123;</span><br><span class="line">    title: <span class="string">'lwx牛逼'</span>,</span><br><span class="line">    <span class="comment">/* 当标签没有传入color时的默认值(该属性会被添加到标签身上,不建议使用) */</span></span><br><span class="line">    color: <span class="string">'#194'</span></span><br><span class="line">&#125;)<span class="string">`</span></span><br><span class="line"><span class="string">    color: <span class="subst">$&#123;props =&gt; props.color&#125;</span>;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>结果 同上 </p><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><blockquote><p>一定要注意样式值不要添加引号!!!</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">    color: #194;</span></span><br><span class="line"><span class="string">    font-size: 1.5em;</span></span><br><span class="line"><span class="string">    span &#123;</span></span><br><span class="line"><span class="string">        color: #606</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Button&gt;lwx&lt;span&gt;冲冲冲&lt;<span class="regexp">/span&gt;&lt;/</span>Button&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>结果： <img src="https://i.bmp.ovh/imgs/2019/11/1a4fb1707900bcaa.png" alt> </p><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create the keyframes</span></span><br><span class="line"><span class="keyword">const</span> rotate = keyframes<span class="string">`</span></span><br><span class="line"><span class="string">  from &#123;</span></span><br><span class="line"><span class="string">    transform: rotate(0deg);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  to &#123;</span></span><br><span class="line"><span class="string">    transform: rotate(360deg);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Rotate = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  display: inline-block;</span></span><br><span class="line"><span class="string">  animation: <span class="subst">$&#123;rotate&#125;</span> 2s linear infinite;</span></span><br><span class="line"><span class="string">  padding: 2rem 1rem;</span></span><br><span class="line"><span class="string">  font-size: 1.2rem;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line">render(</span><br><span class="line">  &lt;Rotate&gt;&amp;lt; 💅 &amp;gt;<span class="xml"><span class="tag">&lt;/<span class="name">Rotate</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;styled-components&quot;&gt;&lt;a href=&quot;#styled-components&quot; class=&quot;headerlink&quot; title=&quot;styled-components&quot;&gt;&lt;/a&gt;styled-components&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;cod
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>antd</title>
    <link href="https://turing5467.github.io/2019/11/11/js%E6%A1%86%E6%9E%B6/react/antd/"/>
    <id>https://turing5467.github.io/2019/11/11/js框架/react/antd/</id>
    <published>2019-11-10T16:00:00.000Z</published>
    <updated>2019-11-13T12:52:29.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="antd"><a href="#antd" class="headerlink" title="antd"></a>antd</h2><h3 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h3><ul><li><p>具有<strong>数据收集</strong>、<strong>校验</strong>和提交功能的表单，包含复选框、单选框、输入框、下拉选择框等元素。 </p></li><li><p>表单域：<code>&lt;Form.item&gt;&lt;/Form.item&gt;</code></p></li></ul><ol><li>form对象</li></ol><p>​    如何让包含<code>&lt;Form&gt;</code>的组件得到form对象? </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用Form.create()将表单型组件包装成一个新组件</span></span><br><span class="line"><span class="comment">//表单型组件：包含Form标签的组件</span></span><br><span class="line"><span class="comment">//新组件会向表单型组件传递一个属性：form</span></span><br><span class="line"><span class="keyword">const</span> WrappedForm = Form.create()(Login);</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> WrappedForm;</span><br></pre></td></tr></table></figure><ol start="2"><li>操作表单数据</li></ol><p>​    <code>form.getFieldDecorator(&#39;标识名称&#39;, {initialValue: 初始值, rules: []})(&lt;Input/&gt;)</code> ：包装表单项标签</p><p>​    <code>form.getFieldsValue()</code>:获取所有字段值</p><p>   <code>form.getFieldValue(id)</code>: 获取指定字段值</p><ol start="3"><li>前台<strong>表单验证</strong></li></ol><p>​    a. 声明式实时表单验证:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getFieldDecorator(<span class="string">'username'</span>,&#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;<span class="attr">required</span>:<span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'用户名不可为空'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">min</span>: <span class="number">4</span>, <span class="attr">message</span>: <span class="string">'用户名不得小于4个字符'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">max</span>: <span class="number">12</span>, <span class="attr">message</span>: <span class="string">'用户名不得大于12个字符'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">pattern</span>: <span class="regexp">/^[a-zA-Z0-9_]+$/</span>, <span class="attr">message</span>: <span class="string">'格式错误'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​    b. 自定义表单验证</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//validator</span></span><br><span class="line">validatePwd = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1).必须输入</span></span><br><span class="line">    <span class="comment">// 2).必须大于等于4位</span></span><br><span class="line">    <span class="comment">// 3).必须小于等于12位</span></span><br><span class="line">    <span class="comment">// 4).必须是英文、数字或下划线组成</span></span><br><span class="line">    value = value.trim()</span><br><span class="line">    <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">        callback(<span class="string">'密码必须输入'</span>)<span class="comment">//参数等同于上方的message</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value.length&lt;<span class="number">4</span>) &#123;</span><br><span class="line">        callback(<span class="string">'密码不能小于4位'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value.length&gt;<span class="number">12</span>) &#123;</span><br><span class="line">        callback(<span class="string">'密码不能大于12位'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="regexp">/^[a-zA-Z0-9_]+$/</span>.test(value)) &#123;</span><br><span class="line">        callback(<span class="string">'密码必须是英文、数字或下划线组成'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback() <span class="comment">// 验证通过</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    c. 点击登陆时统一验证</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">form.validateFields(<span class="function">(<span class="params">error, values</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!error) &#123;</span><br><span class="line">        <span class="comment">/*通过了验证, 发送ajax请求*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​     </p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191113205228631.png" alt="image-20191113205228631"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;antd&quot;&gt;&lt;a href=&quot;#antd&quot; class=&quot;headerlink&quot; title=&quot;antd&quot;&gt;&lt;/a&gt;antd&lt;/h2&gt;&lt;h3 id=&quot;Form&quot;&gt;&lt;a href=&quot;#Form&quot; class=&quot;headerlink&quot; title=&quot;Form&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>RESTful API 最佳实践</title>
    <link href="https://turing5467.github.io/2019/11/09/%E5%85%B6%E4%BB%96/RESTful/"/>
    <id>https://turing5467.github.io/2019/11/09/其他/RESTful/</id>
    <published>2019-11-08T16:00:00.000Z</published>
    <updated>2020-04-17T07:10:36.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="URL设计"><a href="#URL设计" class="headerlink" title="URL设计"></a>URL设计</h2><ul><li><p>核心思想： 客户端发出的数据操作指令都是”<strong>动词 + 宾语</strong>“的结构。如<code>GET/articles</code> </p></li><li><p>动词：一律大写</p><ol><li>GET：读取</li><li>POST：新建</li><li>PUT：更新</li><li>PATCH：部分更新</li><li>DELETE：删除</li></ol></li><li><p>避免多级URL，使用查询字符串替代。如<code>GET /authors/12?categories=2</code></p></li></ul><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><ul><li>状态码必须精确</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>1xx：相关信息</span><br><span class="line"><span class="bullet">- </span>2xx：操作成功</span><br><span class="line"><span class="bullet">- </span>3xx：重定向</span><br><span class="line"><span class="bullet">- </span>4xx：客户端错误</span><br><span class="line"><span class="bullet">- </span>5xx：服务器错误</span><br></pre></td></tr></table></figure><h3 id="2xx状态码"><a href="#2xx状态码" class="headerlink" title="2xx状态码"></a>2xx状态码</h3><ul><li><code>200</code>状态码表示操作成功，但是不同的方法可以返回更精确的状态码。 </li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>GET: 200 OK</span><br><span class="line"><span class="bullet">- </span>POST: 201 Created</span><br><span class="line"><span class="bullet">- </span>PUT: 200 OK</span><br><span class="line"><span class="bullet">- </span>PATCH: 200 OK</span><br><span class="line"><span class="bullet">- </span>DELETE: 204 No Content</span><br></pre></td></tr></table></figure><ul><li><p>POST返回201状态码，表示生成了新资源</p></li><li><p>DELETE返回204状态码，表示资源已经不存在</p></li><li><p>此外，<code>202 Accepted</code>状态码表示服务器已经收到请求，但还未进行处理，会在未来再处理 ，通常用于异步操作</p></li></ul><h3 id="3xx状态码"><a href="#3xx状态码" class="headerlink" title="3xx状态码"></a>3xx状态码</h3><h3 id="4xx状态码"><a href="#4xx状态码" class="headerlink" title="4xx状态码"></a>4xx状态码</h3><p><code>400 Bad Request</code>：服务器<strong>不理解</strong>客户端的请求，未做任何处理。</p><p><code>401 Unauthorized</code>：用户未提供<strong>身份验证凭据</strong>，或者没有通过身份验证。</p><p><code>403 Forbidden</code>：用户通过了身份验证，但是不具有访问资源所需的<strong>权限</strong>。</p><p><code>404 Not Found</code>：所请求<strong>资源不存在</strong>，或不可用。</p><p><code>405 Method Not Allowed</code>：用户已经通过身份验证，但是所用的 HTTP 方法不在他的权限之内。</p><p><code>410 Gone</code>：所请求<strong>资源已转移</strong>，不再可用。</p><p><code>415 Unsupported Media Type</code>：客户端要求的<strong>返回格式不支持</strong>。比如，API 只能返回 JSON 格式，但是客户端要求返回 XML 格式。</p><p><code>422 Unprocessable Entity</code> ：客户端上传的<strong>附件无法处理</strong>，导致请求失败。</p><p><code>429 Too Many Requests</code>：客户端的<strong>请求次数超过限额</strong>。</p><h3 id="5xx状态码"><a href="#5xx状态码" class="headerlink" title="5xx状态码"></a>5xx状态码</h3><p><code>500 Internal Server Error</code>：客户端请求有效，服务器处理时发生了意外。</p><p><code>503 Service Unavailable</code>：服务器无法处理请求，一般用于网站维护状态。</p><h2 id="服务器回应"><a href="#服务器回应" class="headerlink" title="服务器回应"></a>服务器回应</h2><h3 id="不要返回纯文本"><a href="#不要返回纯文本" class="headerlink" title="不要返回纯文本"></a>不要返回纯文本</h3><ul><li><p>API 返回的数据格式，不应该是纯文本，而应该是一个 JSON 对象，因为这样才能返回标准的结构化数据。</p></li><li><p>所以，服务器回应的 HTTP 头的<code>Content-Type</code>属性要设为<code>application/json</code>。</p></li><li><p>客户端请求时，请求的 HTTP 头的<code>ACCEPT</code>属性也要设成<code>application/json</code>。</p></li></ul><h3 id="发送错误时，不要返回200状态码"><a href="#发送错误时，不要返回200状态码" class="headerlink" title="发送错误时，不要返回200状态码"></a>发送错误时，不要返回200状态码</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;URL设计&quot;&gt;&lt;a href=&quot;#URL设计&quot; class=&quot;headerlink&quot; title=&quot;URL设计&quot;&gt;&lt;/a&gt;URL设计&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;核心思想： 客户端发出的数据操作指令都是”&lt;strong&gt;动词 + 宾语&lt;/strong&gt;“的结构
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>React项目实战</title>
    <link href="https://turing5467.github.io/2019/11/08/js%E6%A1%86%E6%9E%B6/react/React%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    <id>https://turing5467.github.io/2019/11/08/js框架/react/React项目实践/</id>
    <published>2019-11-07T16:00:00.000Z</published>
    <updated>2019-11-11T08:23:39.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line">views/ 路由组件</span><br><span class="line">components/ 展示组件</span><br><span class="line">containers/  容器组件</span><br><span class="line">redux/ 状态管理</span><br><span class="line">store.js<span class="comment">//创建store</span></span><br><span class="line">actions.js<span class="comment">//包含所有action的creater函数</span></span><br><span class="line">action-types.js<span class="comment">//包含所有action type的常量字符串</span></span><br><span class="line">reducers.js</span><br><span class="line">utils/ 工具函数</span><br><span class="line">assets/ 静态资源</span><br><span class="line">layouts/ 样式文件</span><br><span class="line">App.js 根组件</span><br><span class="line">index.js 入口文件</span><br></pre></td></tr></table></figure><h3 id="引入antd"><a href="#引入antd" class="headerlink" title="引入antd"></a>引入antd</h3><ul><li><code>import &#39;antd/dist/antd.css&#39;;</code></li></ul><h3 id="实现组件的按需打包"><a href="#实现组件的按需打包" class="headerlink" title="实现组件的按需打包"></a>实现组件的按需打包</h3><ol><li><p>下载依赖</p><p><code>yarn add react-app-rewired customize-cra babel-plugin-import</code></p></li><li><p>定义加载配置的js模块<code>config-overrides.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;override, fixBabelImports&#125;  = <span class="built_in">require</span>(<span class="string">'customize-cra'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">    fixBabelImports(<span class="string">'import'</span>, &#123;  <span class="comment">//配置上babel-plugin-import</span></span><br><span class="line">        libraryName: <span class="string">'antd'</span>,<span class="comment">//针对的是antd组件库</span></span><br><span class="line">        libraryDirectory: <span class="string">'es'</span>,<span class="comment">//源码文件夹中的es文件夹</span></span><br><span class="line">        style: <span class="string">'css'</span>   <span class="comment">//自动打包相关的css</span></span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>配置<code>package.json</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"dependencies": &#123;</span><br><span class="line">"react-app-rewired": "3.3.3"</span><br><span class="line">&#125;,</span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "react-app-rewired start",</span><br><span class="line">    "build": "react-app-rewired build",</span><br><span class="line">    "test": "react-app-rewired test"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="自定义antd主题"><a href="#自定义antd主题" class="headerlink" title="自定义antd主题"></a>自定义antd主题</h4><ul><li><p><code>npm i --save-dev less less-loader</code></p></li><li><p><code>config-overrides.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//addLessLoader</span></span><br><span class="line"><span class="keyword">const</span> &#123;override, fixBabelImports, addLessLoader&#125;  = <span class="built_in">require</span>(<span class="string">'customize-cra'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">     fixBabelImports(<span class="string">'import'</span>, &#123;</span><br><span class="line">        libraryName: <span class="string">'antd'</span>,</span><br><span class="line">        libraryDirectory: <span class="string">'es'</span>,</span><br><span class="line">        style: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">addLessLoader(&#123;</span><br><span class="line">    javascriptEnabled: <span class="literal">true</span>,</span><br><span class="line">    modifyVars: (&#123;<span class="string">'@primary-color'</span>: <span class="string">'#1da57a'</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h3 id="引入图片"><a href="#引入图片" class="headerlink" title="引入图片"></a>引入图片</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./img/logo.png'</span></span><br><span class="line"></span><br><span class="line">&lt;img src=&#123;logo&#125; /&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h2&gt;&lt;figure class=&quot;highlight protobuf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Redux</title>
    <link href="https://turing5467.github.io/2019/11/06/js%E6%A1%86%E6%9E%B6/react/Redux/"/>
    <id>https://turing5467.github.io/2019/11/06/js框架/react/Redux/</id>
    <published>2019-11-05T16:00:00.000Z</published>
    <updated>2020-04-17T07:11:54.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><ul><li>是一个专门用于做状态管理的JS库</li><li>可以用在react、angular、vue等项目中，但基本与react配合使用</li><li>作用：集中式管理react应用中多个组件共享的状态</li></ul><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p> <img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573022619238&di=bb61e99930ec03675152899e0fa1a8a9&imgtype=0&src=http%3A%2F%2Fimage.mamicode.com%2Finfo%2F201811%2F20181102104604703836.png" alt="img"> </p><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><ul><li>描述状态的数据</li></ul><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><blockquote><p> actions 只是描述了<em>有事情发生了</em>这一事实，并没有描述应用如何更新 state。 </p></blockquote><ul><li><p>是把数据从应用传到 store 的有效载荷。 </p></li><li><p>它是 store 数据的<strong>唯一</strong>来源。一般来说你会通过 <code>store.dispatch()</code> 将 action 传到 store。 </p></li><li><p><code>action</code>本质上是对象，必须通过type字段来表示要执行的字段</p></li><li><p><strong>action创建函数</strong>：生成action的方法，它只需要简单的返回一个action，这个action将作为reducer的第二个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: ADD_TODO,</span><br><span class="line">    text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用action -1</span></span><br><span class="line">dispatch(addToDo(text))</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用action -2</span></span><br><span class="line"><span class="keyword">const</span> boundAddTodo = <span class="function"><span class="params">text</span> =&gt;</span> dispatch(addTodo(text))</span><br><span class="line">boundAddTodo(text);</span><br></pre></td></tr></table></figure></li></ul><h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><ul><li><p>指定了应用状态的变化如何响应 <a href="http://cn.redux.js.org/docs/basics/Actions.html" target="_blank" rel="noopener">actions</a> 并发送到 store </p></li><li><p>是一个<strong>纯函数</strong>(不能进行异步操作)，接收旧的 <strong>state 和 action</strong>，返回新的 <strong>state</strong>。 </p></li><li><p><strong>永远不要</strong>在 reducer 里做这些操作：</p><ul><li>修改传入参数；</li><li>执行有副作用的操作，如 API 请求和路由跳转；</li><li>调用非纯函数，如 <code>Date.now()</code> 或 <code>Math.random()</code>。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todoApp</span>(<span class="params">state = initialState, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> SET_VISIBILITY_FILTER:</span><br><span class="line">      <span class="comment">//不直接修改state，而是新建一个副本</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        visibilityFilter: action.filter</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="comment">//在 default 情况下返回旧的 state</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><ul><li><p>通过redux的<code>createStore(reducer, initialState, applyMiddleware)</code>方法生成store，</p></li><li><p>提供 getState() 方法<strong>获取</strong> state； </p></li><li><p>组件可以dispatch  action给 store 来<strong>更新state</strong>,而不是直接通知其它组件</p></li><li><p>其它组件可以通过<strong>订阅</strong>store中的状态(state)来刷新自己的视图</p></li></ul><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li><p>创建reducer</p><ul><li>可以是单独的一个reducer，或者使用<code>combineReducer()</code>合并多个reducer</li><li>action发出命令后将state放入reducer加工函数中，返回新的state</li></ul></li><li><p>创建action</p></li><li><p>创建store：使用<code>createStore</code>方法</p><ul><li>提供<code>dispatch</code>、<code>subscribe</code>、<code>getState</code></li></ul></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span> <span class="comment">// 引入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = &#123;count: <span class="number">0</span>&#125;, action</span>) =&gt;</span> &#123;<span class="comment">//----------&gt; ⑴</span></span><br><span class="line">  <span class="keyword">switch</span> (action.type)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'INCREASE'</span>: <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'DECREASE'</span>: <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.count - <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;   <span class="comment">//----------&gt;⑵</span></span><br><span class="line">  increase: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;<span class="attr">type</span>: <span class="string">'INCREASE'</span>&#125;),</span><br><span class="line">  decrease: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;<span class="attr">type</span>: <span class="string">'DECREASE'</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);<span class="comment">//----------&gt;⑶</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//订阅store</span></span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">store.dispatch(actions.increase()) <span class="comment">// &#123;count: 1&#125;</span></span><br><span class="line">store.dispatch(actions.increase()) <span class="comment">// &#123;count: 2&#125;</span></span><br><span class="line">store.dispatch(actions.increase()) <span class="comment">// &#123;count: 3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="React-Redux"><a href="#React-Redux" class="headerlink" title="React-Redux"></a>React-Redux</h2><ul><li><p>问题：原生redux与react组件<strong>耦合度</strong>太高，编码不够简洁</p></li><li><p>Redux 官方提供的 React 绑定库。 具有高效且灵活的特性。 </p></li><li><p>将store直接集成到react应用的顶层props里面</p></li></ul><h3 id="两种组件"><a href="#两种组件" class="headerlink" title="两种组件"></a>两种组件</h3><ul><li><strong>容器组件</strong>：将UI组件<strong>connect</strong>到<strong>Redux</strong>，最终引入的是容器组件<ul><li>负责管理数据和业务逻辑，不负责UI的呈现</li><li>使用Redux的API</li><li>一般保存在containers文件夹下</li></ul></li><li><strong>UI组件</strong>： <ul><li>只负责UI的呈现，不带有任何业务逻辑</li><li>不适用任何redux的API</li><li>一般保存在components文件夹下</li></ul></li></ul><h3 id="两个核心"><a href="#两个核心" class="headerlink" title="两个核心"></a>两个核心</h3><ul><li><p><strong>Provider</strong></p><p>一般我们将顶层组件包裹在<code>Provider</code>组件之中，这样，所有组件就都可以在react-redux的控制之下。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">&lt;Provider&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>connect</strong> ([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])  </p><blockquote><p>用于包装UI组件生成容器组件</p></blockquote><p>Provider 内的任何组件，如果需要使用 state 中的数据，就必须<strong>「被 connect 过」</strong> </p><ol><li><p><code>mapStateToProps(state, ownProps)</code>：将 state 作为 props 绑定到 组件 上。 </p><p> <strong>ownProps</strong>代表容器组件的props对象</p><p><strong>当 state 变化，或者 ownProps 变化，mapStateToProps 都会被调用</strong> </p></li><li><p><code>mapDispatchToProps(dispatch, ownProps)</code>： 将 action 作为 props 绑定到 组件 上 </p></li></ol></li></ul><ul><li><p>如果connect中没有传入参数，可以使用<code>dispatch</code>来分发action</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123;addTodo, delTodo&#125; <span class="keyword">from</span> <span class="string">'./store/action'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">//上面的简写(下面的()不可省略)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">list</span>: state.list&#125;), &#123;addTodo, delTodo&#125;)(TodoList);</span><br></pre></td></tr></table></figure></li></ul><h2 id="React-redux使用"><a href="#React-redux使用" class="headerlink" title="React-redux使用"></a>React-redux使用</h2><ul><li><p>创建store，并将reducer传入store</p></li><li><p><code>Provider</code>包裹根组件，并传入store属性</p></li><li><p><code>connect</code>子组件，并映射state与action至组件的props</p></li><li><p>在组件中通过<code>props.xx</code>获取数据</p><p>通过 <code>() =&gt; this.props.xxFn(arg)</code>来修改store中的状态</p><p>并且每次都必须更新组件中的状态页面才会更新（或主动调用forceUpdate函数）</p></li></ul><h2 id="redux-与-contect-api的对比"><a href="#redux-与-contect-api的对比" class="headerlink" title="redux 与 contect api的对比"></a>redux 与 contect api的对比</h2><p>1.如果项目体量较小，只是需要一个公共的store存储state，而不讲究使用action来管理state，那context完全可以胜任。反之，则是redux的优点。</p><p>2.context的缺点：因为没有了action，state的值都是被直接修改，state的数据安全性不及redux。同时也不能使用redux的中间件，比如thunk/saga，在一些异步的情况需要自己来处理。</p><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><ul><li><p>redux默认无法进行<strong>异步</strong>处理</p></li><li><p>redux中的数据流：UI -&gt; action(plain) -&gt; reducer -&gt; state -&gt; UI</p><p> <img src="https://segmentfault.com/img/remote/1460000015583154?w=573&h=327" alt="default"> </p></li></ul><h3 id="redux-thunk"><a href="#redux-thunk" class="headerlink" title="redux-thunk"></a>redux-thunk</h3><ul><li><p><code>npm i --save redux-thunk</code></p></li><li><p>数据流： UI -&gt; action(side function) -&gt; middleware -&gt; action(plain) -&gt; reducer -&gt; state -&gt; UI</p></li><li><p>middlware：转换异步操作，生成原始action</p><p> <img src="https://segmentfault.com/img/remote/1460000015583155?w=719&h=323" alt="default"> </p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">const</span> store = createStore(</span><br><span class="line">counter,</span><br><span class="line">    applyMiddleware(thunk) <span class="comment">//应用异步中间件</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//actions.js</span></span><br><span class="line"><span class="comment">// 同步 action 总是返回一个对象</span></span><br><span class="line"><span class="comment">// 异步 action 返回的是一个函数(原生redux是不支持的，所以需要引入中间件)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> incrementAsync = <span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">        axios(&#123;</span><br><span class="line">        url: <span class="string">'/api/goodList'</span></span><br><span class="line">        &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            dispatch(&#123;<span class="attr">type</span>:<span class="string">'init'</span>,<span class="attr">data</span>:res.data&#125;);</span><br><span class="line">        &#125;.catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>实现原理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//判别action的类型，如果action是函数，就调用这个函数</span></span><br><span class="line">    <span class="comment">//实参为dispatch、getState、extraArgument</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next(action);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thunk = createThunkMiddleware();</span><br><span class="line">thunk.withExtraArgument = createThunkMiddleware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk;</span><br></pre></td></tr></table></figure></li><li><p>缺点：</p><ol><li>action形式不统一</li><li>异步操作分散在各个action中</li></ol></li></ul><h3 id="redux-saga"><a href="#redux-saga" class="headerlink" title="redux-saga"></a>redux-saga</h3><ul><li><p>在redux-saga中action是原始的js对象，把所有的异步副作用操作放在了saga函数里面。这样既统一了action的形式，又使得异步操作集中可以被集中处理。</p></li><li><p>数据流： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">action1(plain object) </span><br><span class="line">-&gt; redux-saga监听 </span><br><span class="line">-&gt; 执行相应的Effect方法 </span><br><span class="line">-&gt; 返回描述对象 </span><br><span class="line">-&gt; 恢复执行异步和副作用函数 </span><br><span class="line">-&gt; action2(plain object)</span><br></pre></td></tr></table></figure><p><img src="https://segmentfault.com/img/remote/1460000015583157" alt="default"> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> createSagaMiddleware <span class="keyword">from</span> <span class="string">'redux-saga'</span></span><br><span class="line"><span class="keyword">import</span> &#123; helloSaga &#125; <span class="keyword">from</span> <span class="string">'./sagas'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建中间件</span></span><br><span class="line"><span class="keyword">const</span> sagaMiddleware=createSagaMiddleware();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line"> reducer,</span><br><span class="line"> applyMiddleware(sagaMiddleware)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">sagaMiddleware.run(helloSaga);</span><br><span class="line"><span class="comment">////会输出Hello, Sagas!</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="redux调试工具"><a href="#redux调试工具" class="headerlink" title="redux调试工具"></a>redux调试工具</h2><ul><li><code>npm i --save-dev redux-devtools-extension</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;composeWithDevTools&#125; <span class="keyword">from</span> <span class="string">'redux-devtools-extension'</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">counter,</span><br><span class="line">    composeWithDevTools(applyMiddleware(thunk)) <span class="comment">//应用异步中间件</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Redux&quot;&gt;&lt;a href=&quot;#Redux&quot; class=&quot;headerlink&quot; title=&quot;Redux&quot;&gt;&lt;/a&gt;Redux&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;是一个专门用于做状态管理的JS库&lt;/li&gt;
&lt;li&gt;可以用在react、angular、vue等项目中，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>React-Router</title>
    <link href="https://turing5467.github.io/2019/11/05/js%E6%A1%86%E6%9E%B6/react/React-Router/"/>
    <id>https://turing5467.github.io/2019/11/05/js框架/react/React-Router/</id>
    <published>2019-11-04T16:00:00.000Z</published>
    <updated>2020-03-04T08:39:53.882Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://reacttraining.com/react-router/web/guides/quick-start" target="_blank" rel="noopener">react-router官方文档</a></p><h2 id="npm包的区别"><a href="#npm包的区别" class="headerlink" title="npm包的区别"></a>npm包的区别</h2><ul><li><code>react-router</code> 路由核心功能包</li><li><code>react-router-dom</code> 在<strong>浏览器</strong>上使用的react路由</li><li><code>react-router-native</code> 在<strong>app</strong>上使用的react路由</li></ul><p>其中react-router-dom和react-router-native继承自react-router</p><h2 id="react-router-dom详解"><a href="#react-router-dom详解" class="headerlink" title="react-router-dom详解"></a>react-router-dom详解</h2><h3 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">//App.js</span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import &#123;</span><br><span class="line">  BrowserRouter as Router,</span><br><span class="line">  Switch,</span><br><span class="line">  Route,</span><br><span class="line">  Link</span><br><span class="line">&#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">export default function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;nav&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;Link to=&quot;/&quot;&gt;Home&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;Link to=&quot;/users&quot;&gt;Users&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/nav&gt;</span><br><span class="line">        </span><br><span class="line">          </span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route exact path=&quot;/&quot; component=&#123;Home&#125;&gt;&lt;/Route&gt;</span><br><span class="line">          &lt;Route path=&quot;/about&quot; component=&#123;About&#125;&gt;&lt;/Route&gt;</span><br><span class="line">          &lt;Route path=&quot;/users&quot; component=&#123;Users&#125;&gt;&lt;/Route&gt;</span><br><span class="line">        &lt;/Switch&gt;</span><br><span class="line">        &lt;/nav&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/Router&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Home() &#123;</span><br><span class="line">  return &lt;h2&gt;Home&lt;/h2&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function About() &#123;</span><br><span class="line">  return &lt;h2&gt;About&lt;/h2&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Users() &#123;</span><br><span class="line">  return &lt;h2&gt;Users&lt;/h2&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写法2：这种方式可以向路由中传递参数(另一种传递参数方法为路由的动态参数)</span></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">About</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Users</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Users<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> routes = [</span><br><span class="line">    &lt;Route path=<span class="string">"/home"</span> component=&#123;Home&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span>,</span><br><span class="line">    &lt;Route path=<span class="string">"/about"</span> component=&#123;About&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span>,</span><br><span class="line">    &lt;Route path=<span class="string">"/users"</span> component=&#123;Users&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">]</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> &#123;<span class="attr">...routes</span>&#125;/&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure><h3 id="BrowserRouter-和-HashRouter"><a href="#BrowserRouter-和-HashRouter" class="headerlink" title="BrowserRouter 和 HashRouter"></a>BrowserRouter 和 HashRouter</h3><ul><li><p>路由的<strong>容器</strong>：包含路由的组件必须用容器包裹起来</p><ol><li><code>BrowserRouter</code> history模式的路由<ul><li>basename</li><li>getUserConfirmation：一个函数， 结合<code>&lt;Prompt&gt;</code>组件使用可以拦截和修改 Prompt 的消息。 </li><li>forceRefresh 用来设置在页面导航时是否<strong>强制浏览器整体刷新</strong>，默认值为false  </li><li>keLength 用来设置<code>location.key</code>的长度，默认是6，可以自定义 </li><li>children</li></ul></li><li><code>HashRouter</code> Hash模式的路由<ul><li>basename</li><li>getUserConfirmation</li><li>hashType</li><li>children</li></ul></li></ol></li></ul><h3 id="Route和Switch"><a href="#Route和Switch" class="headerlink" title="Route和Switch"></a>Route和Switch</h3><ul><li><p><code>Route</code>： 路由的一个原材料，它控制路径匹配时渲染的<strong>组件</strong> ，以及<strong>渲染位置</strong></p></li><li><p>渲染组件</p><ul><li>component：路径匹配时渲染指定组件</li><li>render：路径匹配时，渲染该函数返回的 react DOM</li><li>children ：无论路径是否匹配都会渲染（除非本Route被包裹在Switch下），但是match属性只有在路由匹配是才会有值， 方便你根据路由是否匹配渲染不同的ui </li></ul></li><li><p>path：指定路由的匹配规则，如不指定该属性，则总是加载指定组件</p></li><li><p>location ：传递route对象，和当前的route对象对比，如果匹配则跳转 </p></li><li><p><code>exact</code>是否精确匹配，默认false（非精确匹配下：<code>/a/b</code>将匹配<code>/a</code>，反之不行）</p><p>  <strong>在嵌套路由中，如果父路由具有该属性，那么将无法加载子路由</strong></p></li><li><p><code>sensitive</code> 区分大小写（默认false）</p></li><li><p><code>strict</code>  如果为true，则将仅匹配具有尾部斜杠的location.pathname。当location.pathname中有其他URL段时，这不起作用。 </p></li></ul><ul><li><p><code>Switch</code></p><ul><li><strong>只会匹配第一个路由</strong> （<code>&lt;Route&gt;</code>或<code>&lt;Redirect&gt;</code>）， Switch内部只能包含Route、Redirect、Router</li></ul></li></ul><h3 id="Link和NavLink"><a href="#Link和NavLink" class="headerlink" title="Link和NavLink"></a>Link和NavLink</h3><ul><li><code>Link</code>组件用于取代<code>&lt;a&gt;</code>元素，生成一个链接，允许用户<strong>点击后跳转</strong>到另一个路由 <ul><li>to：字符串写法 或 对象写法</li><li>replace</li><li>innerRef：访问Link标签的dom</li></ul></li><li><code>&lt;NavLink to=&quot;/xx&quot;&gt;</code>  是<code>&lt;Link&gt;</code>的一种特殊类型，当其prop与当前路由匹配时，可以将其自身设置为“active” 状态<ul><li>Link所有的API</li><li><code>activeStyle</code> “active” 状态下的类名</li><li><code>activeStyle</code> “active” 状态下的样式</li><li><code>exact</code></li><li><code>strict</code></li><li><code>isActive</code>： 接收一个回调函数，active状态变化的时候回触发，返回false则中断跳转 </li><li><code>location</code></li></ul></li></ul><h3 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h3><ul><li><p>路由重定向</p><ol><li><p><code>from</code>：重定向之前的路径， 如果匹配则重定向，不匹配则不重定向 </p><p>没有from属性默认匹配</p><p>一般写在路由最后，用于显示<strong>默认路由</strong></p></li><li><p><code>to</code>：字符串 | 对象</p></li><li><p>push：生成新历史记录</p></li><li><p>exact</p></li><li><p>strict</p></li><li><p>sensitive</p></li></ol></li></ul><h3 id="withRouter函数"><a href="#withRouter函数" class="headerlink" title="withRouter函数"></a>withRouter函数</h3><ul><li><p>当一个非路由组件也想访问到当前路由的<strong>match,location,history</strong>对象，那么withRouter将是一个非常好的选择，可以理解为<strong>将一个组件包裹成路由组件</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">const</span> MyComponent = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; match, location, history &#125; = <span class="keyword">this</span>.props</span><br><span class="line">     <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;&#123;props.location.pathname&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">const FirstTest = withRouter(MyComponent);</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Prompt"><a href="#Prompt" class="headerlink" title="Prompt"></a>Prompt</h3><ul><li><code>Promtp</code>   当从当前路由退出的时候,提示用户是否要跳转，默认使用<code>window.confirm</code>，可以结合<code>getUserConfirmation</code>构建自定义提示信息 </li></ul><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><ul><li>控制浏览器的前进后退、刷新等</li><li>使用 <code>Route</code> 匹配的组件会在props 中包含一个<code>history</code> 的属性,history中的方法 </li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">History &#123;</span><br><span class="line">    <span class="symbol">length:</span> number;</span><br><span class="line">    <span class="symbol">action:</span> Action;</span><br><span class="line">    <span class="symbol">location:</span> Location;</span><br><span class="line">    </span><br><span class="line">    push(<span class="symbol">path:</span> Path, <span class="symbol">state?:</span> LocationState): void; </span><br><span class="line">    replace(<span class="symbol">path:</span> Path, <span class="symbol">state?:</span> LocationState): void; </span><br><span class="line">    go(<span class="symbol">n:</span> number): void; </span><br><span class="line">    goBack(): void; </span><br><span class="line">    goForward(): void;</span><br><span class="line">    </span><br><span class="line">    block(<span class="symbol">prompt?:</span> boolean <span class="params">| string |</span> TransitionPromptHook): UnregisterCallback;</span><br><span class="line">    listen(<span class="symbol">listener:</span> LocationListener): UnregisterCallback;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><ul><li>当前URL的位置对象</li><li>使用 <code>Route</code> 匹配的react 组件会在props 中包含一个<code>location</code> 的属性</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="symbol">key:</span> <span class="string">'ac3df4'</span>, <span class="regexp">//</span> <span class="keyword">not</span> with HashHistory!</span><br><span class="line">  <span class="symbol">pathname:</span> <span class="string">'/somewhere'</span>,</span><br><span class="line">  <span class="symbol">search:</span> <span class="string">'?some=search-string'</span>,  <span class="regexp">//</span>查询字符串</span><br><span class="line">  <span class="symbol">hash:</span> <span class="string">'#howdy'</span>,<span class="regexp">//</span> <span class="string">""</span> with BrowserHistory</span><br><span class="line">  <span class="symbol">state:</span> &#123;</span><br><span class="line">    [userDefined]: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><ul><li><p>包含<code>&lt;Route path&gt;</code>如何与url匹配的信息</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="symbol">params:</span> &#123;&#125;, <span class="regexp">//</span>获取参数信息对象</span><br><span class="line">    <span class="symbol">isExact:</span> <span class="literal">false</span>,</span><br><span class="line">    <span class="symbol">path:</span> <span class="string">'/user/:id'</span>,</span><br><span class="line">    <span class="symbol">url:</span> <span class="string">'/user/1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>Route</code> 匹配的react 组件会在props 中包含一个<code>match</code> 的属性，拥有上述属性</p></li></ul><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><ul><li><code>Route</code>嵌套<code>Route</code></li><li>用户访问子路由时，会先加载父组件，然后在它的内部再加载子组件。 </li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route, Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;App&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;&lt;Link to="/</span>about<span class="string">"&gt;About&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;li&gt;&lt;Link to="</span>/inbox<span class="string">"&gt;Inbox&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &#123;this.props.children&#125;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const About = React.createClass(&#123;/*自己写*/&#125;)</span></span><br><span class="line"><span class="string">const Inbox = React.createClass(&#123;/*自己写*/&#125;)</span></span><br><span class="line"><span class="string">const Message = React.createClass(&#123;/*自己写*/&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">React.render((</span></span><br><span class="line"><span class="string">  &lt;Router&gt;</span></span><br><span class="line"><span class="string">    &lt;Route path="</span>/<span class="string">" component=&#123;App&#125;&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>about<span class="string">" component=&#123;About&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>inbox<span class="string">" component=&#123;Inbox&#125;&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>messages/:id<span class="string">" component=&#123;Message&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/Route&gt;</span></span><br><span class="line"><span class="string">    &lt;/Route&gt;</span></span><br><span class="line"><span class="string">  &lt;/Router&gt;</span></span><br><span class="line"><span class="string">), document.body)</span></span><br></pre></td></tr></table></figure><blockquote><p><code>path</code>属性是可以省略的，这样的话，不管路径是否匹配，<strong>总是会加载指定组件</strong>。 </p></blockquote><ul><li><p>如果<code>path</code>是<strong>相对路径</strong>，那么开头不需要加<code>/</code></p></li><li><p>如果<code>path</code>省略，那么不管路径是否匹配，<strong>总是会加载指定组件</strong>。 </p></li></ul><table><thead><tr><th>URL</th><th>渲染组件</th></tr></thead><tbody><tr><td><code>/</code></td><td><code>App</code></td></tr><tr><td><code>/about</code></td><td><code>App -&gt; About</code></td></tr><tr><td><code>/inbox</code></td><td><code>App -&gt; Inbox</code></td></tr><tr><td><code>/inbox/messages/:id</code></td><td><code>App -&gt; Inbox -&gt; Message</code></td></tr></tbody></table><h3 id="path通配符"><a href="#path通配符" class="headerlink" title="path通配符"></a>path通配符</h3><ul><li><p><code>:name</code>：通过<code>useParams().name</code>取出</p></li><li><p><code>()</code>：表示可选</p></li><li><p><code>*</code>： 匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。 </p></li><li><p><code>**</code>： 匹配任意字符，直到下一个<code>/</code>、<code>?</code>、<code>#</code>为止。匹配方式是<strong>贪婪模式</strong>。 </p></li></ul><h3 id="跳转前确认"><a href="#跳转前确认" class="headerlink" title="跳转前确认"></a>跳转前确认</h3><ul><li><code>routerWillLeave</code></li></ul><h2 id="react-ui"><a href="#react-ui" class="headerlink" title="react ui"></a>react ui</h2><ul><li>移动</li><li>PC</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://reacttraining.com/react-router/web/guides/quick-start&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-router官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;n
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>chrome插件开发指南</title>
    <link href="https://turing5467.github.io/2019/11/04/%E5%85%B6%E4%BB%96/Chrome%20Extensions/"/>
    <id>https://turing5467.github.io/2019/11/04/其他/Chrome Extensions/</id>
    <published>2019-11-04T07:39:58.290Z</published>
    <updated>2019-11-04T08:09:36.435Z</updated>
    
    <content type="html"><![CDATA[<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>编写<code>manifest.json</code>文件</li><li>添加至chrome扩展</li><li>启用扩展</li></ol><h3 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;编写&lt;code&gt;manifest.json&lt;/code&gt;文件&lt;/li&gt;
&lt;li&gt;添加至chrome扩展&lt;/li&gt;
&lt;li&gt;启用扩
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>React高级指引</title>
    <link href="https://turing5467.github.io/2019/11/04/js%E6%A1%86%E6%9E%B6/react/React%E9%AB%98%E7%BA%A7%E6%8C%87%E5%BC%95/"/>
    <id>https://turing5467.github.io/2019/11/04/js框架/react/React高级指引/</id>
    <published>2019-11-03T16:00:00.000Z</published>
    <updated>2019-11-14T11:35:07.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React高级指引"><a href="#React高级指引" class="headerlink" title="React高级指引"></a>React高级指引</h2><ul><li><a href="https://react.docschina.org/docs/thinking-in-react.html" target="_blank" rel="noopener">官方文档</a></li></ul><h2 id="PropTypes进行类型检查"><a href="#PropTypes进行类型检查" class="headerlink" title="PropTypes进行类型检查"></a>PropTypes进行类型检查</h2><ul><li><p>需要先安装并引入<code>prop-types</code>库</p></li><li><p><code>PropTypes</code> 提供一系列<strong>验证器</strong>，可用于确保组件接收到的数据类型是有效的。 </p></li><li><p>出于性能方面的考虑，<code>propTypes</code> 仅在<strong>开发模式</strong>下进行检查。</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">MyComponent.propTypes = &#123;</span><br><span class="line">  <span class="comment">// 你可以将属性声明为 JS 原生类型，默认情况下</span></span><br><span class="line">  <span class="comment">// 这些属性都是可选的。</span></span><br><span class="line">  <span class="comment">// array bool func number object string symbol</span></span><br><span class="line">  optionalArray: PropTypes.array,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 任何可被渲染的元素（包括数字、字符串、元素或数组）</span></span><br><span class="line">  <span class="comment">// (或 Fragment) 也包含这些类型。</span></span><br><span class="line">  optionalNode: PropTypes.node,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  React 元素</span></span><br><span class="line">  optionalElement: PropTypes.element,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  React 元素类型（即，MyComponent）。</span></span><br><span class="line">  optionalElementType: PropTypes.elementType,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 类的实例，这里使用</span></span><br><span class="line">  <span class="comment">// JS 的 instanceof 操作符。</span></span><br><span class="line">  optionalMessage: PropTypes.instanceOf(Message),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 特定值，指定它为枚举类型。</span></span><br><span class="line">  optionalEnum: PropTypes.oneOf([<span class="string">'News'</span>, <span class="string">'Photos'</span>]),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 几种类型中的任意一个类型</span></span><br><span class="line">  optionalUnion: PropTypes.oneOfType([</span><br><span class="line">    PropTypes.string,</span><br><span class="line">    PropTypes.number</span><br><span class="line">  ]),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 由某一类型的元素组成的数组</span></span><br><span class="line">  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 由某一类型的值组成的对象</span></span><br><span class="line">  optionalObjectOf: PropTypes.objectOf(PropTypes.number),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 可以指定一个对象由特定的类型值组成</span></span><br><span class="line">  optionalObjectWithShape: PropTypes.shape(&#123;</span><br><span class="line">    color: PropTypes.string,</span><br><span class="line">    fontSize: PropTypes.number</span><br><span class="line">  &#125;),</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// An object with warnings on extra properties</span></span><br><span class="line">  optionalObjectWithStrictShape: PropTypes.exact(&#123;</span><br><span class="line">    name: PropTypes.string,</span><br><span class="line">    quantity: PropTypes.number</span><br><span class="line">  &#125;),   </span><br><span class="line"></span><br><span class="line">  <span class="comment">// isRequired</span></span><br><span class="line">  <span class="comment">// 这个 prop 没有被提供时，会打印警告信息。</span></span><br><span class="line">  requiredFunc: PropTypes.func.isRequired,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 任意类型</span></span><br><span class="line">  requiredAny: PropTypes.any.isRequired,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义验证器。它在验证失败时应返回一个 Error 对象。</span></span><br><span class="line">  customProp: <span class="function"><span class="keyword">function</span>(<span class="params">props, propName, componentName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(props[propName])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Invalid prop `'</span> + propName + <span class="string">'` supplied to'</span> +</span><br><span class="line">        <span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 你也可以提供一个自定义的 `arrayOf` 或 `objectOf` 验证器。</span></span><br><span class="line">  <span class="comment">// 它应该在验证失败时返回一个 Error 对象。</span></span><br><span class="line">  <span class="comment">// 验证器将验证数组或对象中的每个值。验证器的前两个参数</span></span><br><span class="line">  <span class="comment">// 第一个是数组或对象本身</span></span><br><span class="line">  <span class="comment">// 第二个是他们当前的键。</span></span><br><span class="line">  customArrayProp: PropTypes.arrayOf(<span class="function"><span class="keyword">function</span>(<span class="params">propValue, key, componentName, location, propFullName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(propValue[key])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Invalid prop `'</span> + propFullName + <span class="string">'` supplied to'</span> +</span><br><span class="line">        <span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>默认prop值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Greeting.defaultProps = &#123;</span><br><span class="line">  name: <span class="string">'Stranger'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或 (在类中)</span></span><br><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    name: <span class="string">'stranger'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h2><ul><li>受控组件： 表单项输入数据能<strong>自动收集</strong>成状态，数据是由 <strong>React 组件</strong>管理 </li><li>非受控组件： 需要时手动读取表单输入框的值，表单数据是由 <strong>DOM节点</strong>管理 </li></ul><ol><li><p><code>React.createRef()</code> 创建一个能够通过 ref 属性附加到 React 元素的 ref。</p><p>返回值是一个对象，具有<code>current</code>属性，表示当前DOM节点</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.input = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    alert(<span class="string">'A name was submitted: '</span> + <span class="keyword">this</span>.input.current.value);</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">          Name:</span><br><span class="line">          &#123;<span class="comment">/*  */</span>&#125;</span><br><span class="line">          &lt;input type=<span class="string">"text"</span> ref=&#123;<span class="keyword">this</span>.input&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input type="submit" value="Submit" /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>非受控组件的<strong>默认值</strong>：直接在标签上声明<code>defaultValue</code>属性</li></ul><h3 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h3><ul><li><p>Component存在的问题</p><ol><li>父组件重新<code>render</code>，子组件也会重新<code>render</code>，即使没有任何变化</li><li>当前组件<code>setState({})</code>（状态并未改变），render会重新执行</li></ol></li><li><p>解决：</p><p><strong>shouldComponentUpdate</strong>默认返回true，即使数据没有发生变化render都会重新执行</p><ol><li><p>重写<code>shouldComponentUpdate</code>，变化则返回true</p></li><li><p>使用<strong>PureComponent</strong>代替<strong>Component</strong></p></li></ol></li><li><p>好处：优化性能</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React高级指引&quot;&gt;&lt;a href=&quot;#React高级指引&quot; class=&quot;headerlink&quot; title=&quot;React高级指引&quot;&gt;&lt;/a&gt;React高级指引&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://react.docschina.org
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>nginx</title>
    <link href="https://turing5467.github.io/2019/11/01/%E5%85%B6%E4%BB%96/nginx/"/>
    <id>https://turing5467.github.io/2019/11/01/其他/nginx/</id>
    <published>2019-10-31T16:00:00.000Z</published>
    <updated>2020-04-17T07:11:15.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><ul><li>nginx是一款轻量级的Web服务器/反向代理服务器及电子邮件(IMAP/POP3)代理服务器</li><li>特点<ol><li>占用内存少：相同服务器，nginx比apache能接受的连接多很多</li><li>高并发连接</li><li>热部署：在修改配置文件后，不需要重启，重载操作？</li><li>处理静态文件很快（但动态页面处理能力不如Apache等老牌软件）</li></ol></li></ul><h2 id="LNMPA"><a href="#LNMPA" class="headerlink" title="LNMPA"></a>LNMPA</h2><ul><li><p>LAMP：Linux下<strong>Apache、MySQL、PHP</strong> 这种网站服务器架构 </p></li><li><p>LNMP：Linux下<strong>Nginx、MySQL、PHP</strong> 这种网站服务器架构 </p></li><li><p>LNMPA： Linux下<strong>Nginx、MySQL、PHP、Apache</strong>  这种网站服务器架构 ， 是结合LAMP与LNMP各自的优点而产生的新的网站服务器架构。 </p></li><li><p>为什么采用LNMPA</p><ul><li>LNMPA使用<strong>Nginx</strong>作为<strong>前端服务</strong>能够更快更及时的<strong>静态</strong>页面、js、图片等，当客户端请求访问<strong>动态</strong>页面时由Nginx的<strong>反向代理给Apache</strong>处理，Apache处理完再交予Nginx返回给客户端。 </li></ul></li></ul><h2 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启nginx</span></span><br><span class="line">start nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查语法</span></span><br><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载（热部署）</span></span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure><h2 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># 进程数</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line"># 单进程并发量</span><br><span class="line">worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line"># 一个 虚拟机 （可以有多个虚拟机）</span><br><span class="line">    server &#123;</span><br><span class="line">    # 虚拟机监听端口</span><br><span class="line">listen  8088;</span><br><span class="line"></span><br><span class="line"># 虚拟机监听域名</span><br><span class="line">server_name  10.3.142.97;</span><br><span class="line"></span><br><span class="line"># 网站根目录</span><br><span class="line"># root /xx</span><br><span class="line"></span><br><span class="line">proxy_set_header Cookie $http_cookie;</span><br><span class="line">        proxy_set_header X-Forwarded-Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-real-ip $remote_addr;</span><br><span class="line"></span><br><span class="line"># 默认访问地址</span><br><span class="line">location /&#123;</span><br><span class="line">            proxy_pass http://10.3.142.97:8080;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        # 错误页面</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        root html</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"># 反向代理</span><br><span class="line">location ^~ /api/ &#123;</span><br><span class="line">proxy_pass http://10.3.142.97:3000/;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><ul><li><p><strong>正向代理</strong>：如果<strong>局域网中</strong>的客户要访问<strong>局域网外</strong>的internet，则需要通过代理服务器来访问，这种代理服务就叫做正向代理</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200105191455968.png" alt="image-20200105191455968"></p></li><li><p><strong>反向代理</strong>：客户端不许配置要任何配置，只需要将请求发送到反向代理服务器，由反向代理服务器去目标服务器获取数据，再返回给客户端。（此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址）</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200105202333866.png" alt="image-20200105202333866"></p></li></ul><h3 id="缓存功能"><a href="#缓存功能" class="headerlink" title="缓存功能"></a>缓存功能</h3><ul><li>nginx通过配置，可以告知浏览器，返回数据的有效时间.</li><li>浏览器就可以根据数据的有效时间，判断是否应该到<strong>服务器</strong>请求，如果没有超过有效期，就使用浏览器缓存的数据。</li><li>好处：<strong>减少服务器请求，降低带宽压力</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 缓存图片文件 示例</span></span><br><span class="line">location ~ \.(jpeg|jpq|png)$ &#123;</span><br><span class="line"><span class="comment"># d: 天 h: 小时</span></span><br><span class="line">expires 1d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 而后可以看到响应头中多了Cache-Control: max-age=86400字段</span></span><br></pre></td></tr></table></figure><h3 id="gzip压缩"><a href="#gzip压缩" class="headerlink" title="gzip压缩"></a>gzip压缩</h3><ul><li>压缩资源，减少带宽，提高访问速度</li><li>大部分浏览器支持（IE6-不支持）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_http_version 1.0;</span><br><span class="line">gzip_disable <span class="string">'MISE [1-6].'</span>;</span><br><span class="line"><span class="comment"># 压缩文件格式</span></span><br><span class="line">gzip_types image/jepeg</span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul><li>原理：</li><li>三台虚拟机：<ol><li>负载均衡服务器：nginx</li><li>web1</li><li>web2</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Nginx&quot;&gt;&lt;a href=&quot;#Nginx&quot; class=&quot;headerlink&quot; title=&quot;Nginx&quot;&gt;&lt;/a&gt;Nginx&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;nginx是一款轻量级的Web服务器/反向代理服务器及电子邮件(IMAP/POP3)代理服务器&lt;/li&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>React基本感知</title>
    <link href="https://turing5467.github.io/2019/10/30/js%E6%A1%86%E6%9E%B6/react/React/"/>
    <id>https://turing5467.github.io/2019/10/30/js框架/react/React/</id>
    <published>2019-10-29T16:00:00.000Z</published>
    <updated>2020-04-01T15:02:36.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三大主流框架"><a href="#三大主流框架" class="headerlink" title="三大主流框架"></a>三大主流框架</h2><ul><li><code>Angular</code> 出来<strong>较早</strong>的框架 。学习曲线较抖</li><li><code>React</code> 最流行(用的人比较多)，设计很优秀，由中国人开发，文档友好</li><li><code>Vue</code> 最火(关注的人较多)</li></ul><h3 id="React与Vue"><a href="#React与Vue" class="headerlink" title="React与Vue"></a>React与Vue</h3><ul><li><p><strong>模块化</strong>：从<strong>代码</strong>的角度来进行分析，把一些可服用的代码，抽离为单个的模块，便于项目的维护与开发</p></li><li><p><strong>组件化</strong>：从<strong>UI界面</strong>的角度来进行分析，把一些可复用的<strong>UI元素</strong>，抽离为单独的组件，便于项目的维护与开发</p><ol><li><strong>Vue实现组件化</strong>：通过<code>.vue</code>文件，来创建对应的组件<ul><li><code>template</code> 结构</li><li><code>script</code> 行为</li><li><code>style</code> 样式</li></ul></li><li><strong>React实现组件化</strong>：一切都通过<code>js</code>表现，ES6和ES7(<code>async await</code>)需要会用</li></ol></li><li><p><strong>移动APP开发</strong>体验方面</p><ol><li>vue:  结合<code>weex</code>这门技术,提供了迁移到移动端APP开发的体验(目前只是一个小的玩具，并没有很成功的大案例)</li><li>React: 结合<code>ReactNative</code>，提供了无缝迁移到移动APP的开发体验(<code>RN</code>用的最多，最火最流行)</li></ol></li></ul><h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><ul><li><p><code>DOM</code>：浏览器中的概念，用<code>js</code>对象来表示页面上的元素，并提供了操作DOM对象的API</p></li><li><p><strong>React中的虚拟DOM</strong>：框架中的概念，通过<code>js</code>对象来模拟页面上的DOM元素和嵌套关系</p><ol><li><strong>目的</strong>：实现页面中DOM元素的高效更新</li></ol></li></ul><h2 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h2><ul><li><p><strong>tree diff</strong> 新旧两颗DOM树，逐层对比的过程，就是<strong>tree diff</strong>。</p><pre><code>当整颗DOM树对比完毕，所有需要更新的元素，必然能够找到</code></pre></li><li><p><strong>component diff</strong> 在进行<strong>tree diff</strong>的过程中，每一层中<strong>组件级别</strong>的对比，就是<strong>component diff</strong></p><ul><li>如果对比前后，组件类型相同，则<strong>暂时</strong>认为组价不需要更新</li><li>如果类型不同，则移除旧组件，创建新组件，并追加到页面上</li></ul></li><li><p><strong>element diff</strong>   在进行<strong>component diff</strong>的过程中，如果组件类型相同，则需要进行元素级别的对比，叫做<strong>element diff</strong></p></li></ul><h2 id="在项目中使用react"><a href="#在项目中使用react" class="headerlink" title="在项目中使用react"></a><strong>在项目中使用</strong>react</h2><ul><li><p><code>cnpm i react react-dom --save</code></p><ul><li><code>react</code>：专门用于创建组件和虚拟dom，同时包含组件的生命周期</li><li><code>react-dom</code>：专门进行DOM操作</li></ul></li><li><p>创建容器</p><ul><li><code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code></li></ul></li><li><p><code>React.createElement(tag, data, 子节点|文本节点...)</code> 创建虚拟DOM元素</p><ol><li><code>tag</code>：创建的元素标签</li><li><code>data</code>： 创建元素标签身上的属性</li><li>参数3：子节点(包括 虚拟DOM  和 文本节点 )</li><li>参数n：其它子节点</li></ol></li><li><p><code>ReactDOM.render(virtualDOM, mountElement &lt;HTMLDivElement&gt;)</code> 将元素渲染到页面上</p><ol><li><code>virtualDOM</code>：要渲染的虚拟DOM元素</li><li><code>mountElement</code> ：元素挂载的容器</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//React.createElement(tag &lt;string&gt;, nodeAttr &lt;Object&gt;, 子节点|文本节点...)</span></span><br><span class="line"><span class="keyword">const</span> mydom = React.createElement(<span class="string">'h1'</span>, &#123;&#125;, <span class="string">'Hello React'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ReactDOM.render(virtualDOM, mountElement &lt;HTMLDivElement&gt;)</span></span><br><span class="line">ReactDOM.render(mydom, <span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><ul><li><p>JSX：<strong>符合XML规范的JS语法</strong></p></li><li><p>可以用来替代<code>React.createElement()</code>，因为  JSX最终将被转换为<code>React.createElement()</code></p></li><li><p>启用JSX语法</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191031144332970.png" alt="image-20191031144332970"></p><ul><li>添加babel-loader配置项</li></ul></li></ul><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191031144509567.png" alt="image-20191031144509567"></p><p>当然，用create-react-app就另当别论了</p><h4 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h4><ul><li>嵌入表达式：<code>{title}</code></li><li>属性绑定：（不能加双引号）</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> title=<span class="string">"Hello React"</span></span><br><span class="line"><span class="keyword">const</span> mydom = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">title</span>=<span class="string">&#123;title&#125;</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><p>渲染jsx元素：<code>{mydom}</code></p></li><li><p>渲染jsx元素数组</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mydoms = [</span><br><span class="line">    &lt;h1&gt;Hello Vue&lt;<span class="regexp">/h1&gt;,</span></span><br><span class="line"><span class="regexp">    &lt;h2&gt;Hello React&lt;/</span>h2&gt;</span><br><span class="line">];</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;mydoms&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br></pre></td></tr></table></figure></li><li><p>将普通字符串数组，转为jsx数组并渲染：<code>forEach</code>和<code>map</code></p></li><li><p>React中的key与Vue中的key作用一样</p></li><li><p>注释：<code>{/* 注释 */}</code></p></li><li><p><strong>类名</strong>：<code>className</code> （原因：js关键字冲突）</p></li><li><p><strong>style</strong>：<code>style={{color: '#194'}}</code> 第一个大括号包裹变量，第二个为对象</p><ul><li>样式名采用驼峰命名法</li></ul></li><li><p><code>label</code>的<code>for</code>属性： <code>htmlFor</code></p></li><li><p>JSX节点，必须有唯一的根元素进行包裹</p></li></ul><blockquote><p>在JavaScript的任何地方，都可以使用JSX语法 o.o</p></blockquote><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul><li><p>组件：用来实现特定功能效果的代码集合</p></li><li><p>创建方式</p><blockquote><p>小写开头的标签会被视为原生DOM标签</p><p><strong>大写开头</strong>的标签会被视为<strong>组件</strong></p></blockquote><ol><li><p><strong>函数组件</strong>：返回虚拟DOM元素（函数式组件）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;/* 下面两种写法一样 */&#125;</span></span><br><span class="line"><span class="xml">         &#123;Hello()&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Hello</span>&gt;</span><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>))</span><br></pre></td></tr></table></figure><ul><li><strong>语法简单，效率高</strong></li><li>不具有生命周期</li></ul></li></ol></li></ul><ol start="2"><li><p><strong>class组件</strong></p><ul><li>如果组件使用到<strong>状态</strong>，那么只能使用该方式创建组件</li><li>拥有生命周期</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="comment">//将新增的方法强制绑定为this对象</span></span><br><span class="line">        <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><pre><code>- 在类里，只有`constructor`和`render`中可以通过`this`拿到组件对象</code></pre><blockquote><p>组件间通信：</p><pre><code>1. 通过`props`传递（只能一层一层从父到子的传递）</code></pre><ol start="2"><li><p>发布订阅模式</p><ol start="3"><li><p>redux</p><p>从事件角度来讲：</p><p>​    订阅就相当于绑定监听函数</p><p>​    发布就相当于触发事件</p></li></ol></li></ol></blockquote><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><ul><li><p>构造函数接收的唯一参数<code>props</code>：  包含组件使用时接收的所有属性</p></li><li><p>指定属性默认值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;props.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;props.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;props.sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定属性默认值</span></span><br><span class="line">Person.defaultProps = &#123;</span><br><span class="line">    sex: <span class="string">'女'</span>,</span><br><span class="line">    age: <span class="string">'18'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可使用<code>...</code>直接传入数据，如<code>{...data}</code></p></li></ul><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><ul><li>与 props 类似，但是 state 是<strong>私有</strong>的，并且<strong>完全受控于当前组件</strong>。 （相当于vue中的data）</li><li>在<code>constructor</code>中为<code>state</code><strong>赋初值</strong></li><li><code>this.setState(updater | Obejct, callback?)</code><strong>修改</strong>state</li><li>updater:  参数为state 和 props<ul><li>如果通过<code>this.state.xx = xx</code>修改，则不会触发视图的更新，需要主动调用<code>this.forceUpdate</code></li><li>该方法是<strong>异步</strong>的，如果希望修改后执行某些操作，可以在其第二个参数中定义</li></ul></li></ul><h3 id="props与state"><a href="#props与state" class="headerlink" title="props与state"></a>props与state</h3><ul><li>用途：props用于<strong>定义外部接口</strong>，state用于<strong>记录内部状态</strong> </li><li>赋值： props的<strong>赋值</strong>在于<strong>外部</strong>世界使用组件，state的赋值在于组件<strong>内部</strong> </li><li>是否可写： 组件不应该改变props的值，而state存在的目的就是让组件来修改的 </li></ul><blockquote><p>没有 state 的组件叫无状态组件（stateless component），</p><p>设置了 state 的叫做有状态组件（stateful component）。</p><p>因为状态会带来管理的复杂性，我们尽量多地写<strong>无状态组件</strong>，尽量少地写有状态组件。</p><p>这样会<strong>降低代码维护的难度(提高性能)</strong>，也会在一定程度上<strong>增强组件的可复用性</strong>。</p><p><strong>函数式组件</strong>就只有props没有state，而react也非常鼓励我们编写函数式组件。</p></blockquote><ul><li>默认props：<code>static defaultProps = {x: xx}</code></li></ul><h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><ul><li>父组件调用子组件对象的方法：使用ref技术<ol><li>父组件创建容器：<code>this.pw = React.creatRef()</code></li><li>将容器交给子组件的ref属性上</li><li>通过ref容器读取标签元素 <code>this.pw.current</code></li></ol></li></ul><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><ul><li><p>命名采用小驼峰：如<code>onClick</code></p></li><li><p>不能通过<code>return false</code>来阻止默认行为，必粗显式使用<code>e.preventDefault()</code></p></li><li><p>由于ES6中, class中的方法默认不会绑定<code>this</code>，需要在<code>constructor</code>中通过<code>bind</code>绑定<code>this</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">&#125;, </span><br><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 当有参数时，不可以直接<code>onClick={this.xx(x)}</code>,否则会报<a href="https://www.it1352.com/1009356.html" target="_blank" rel="noopener">最大更新深度超出错误(ReactJS: Maximum update depth exceeded error)</a>，需用下面这种方式</p></blockquote><ul><li>如果觉得麻烦，可以在标签回调/函数声明中使用箭头函数</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">handleSubmit = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;;</span><br><span class="line">&lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.handleClick(e)&#125;&gt; Click me &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/</span>button&gt;</span><br><span class="line">&lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.handleClick(e, xx)&#125;&gt; Click me &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;!-- </span></span><br><span class="line"><span class="regexp">  第一种情况：显式传递参数e</span></span><br><span class="line"><span class="regexp">  第二种情况：事件对象作为第二(1+1)个参数被隐式传递</span></span><br><span class="line"><span class="regexp">·第三种情况： 多参数</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">### 条件渲染</span><br><span class="line"></span><br><span class="line">- `if`或者 条件运算符`xxx ? x : xx`  或 `switch`</span><br><span class="line"></span><br><span class="line">  ```jsx</span><br><span class="line">  //if写法</span><br><span class="line">  function Greeting(props) &#123;</span><br><span class="line">    const isLoggedIn = props.isLoggedIn;</span><br><span class="line">    if (isLoggedIn) &#123;</span><br><span class="line">      return &lt;UserGreeting /&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">    return &lt;GuestGreeting /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;Greeting isLoggedIn=&#123;false&#125; /&gt;,</span><br><span class="line">    document.getElementById(&apos;root&apos;)</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ? : 写法</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  isLogIn ? <span class="xml"><span class="tag">&lt;<span class="name">UserGreeting</span> /&gt;</span> : <span class="tag">&lt;<span class="name">GuestGreeting</span> /&gt;</span>,</span></span><br><span class="line"><span class="xml">  document.getElementById('root')</span></span><br><span class="line"><span class="xml">);</span></span><br></pre></td></tr></table></figure></li><li><p><code>v-show</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&#123;&#123;<span class="attr">display</span>: bool? <span class="string">'block'</span> : <span class="string">'none'</span>&#125;&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="列表和key"><a href="#列表和key" class="headerlink" title="列表和key"></a>列表和key</h3><ul><li><p><strong>循环/遍历</strong>：<code>Array.prototype.forEach()</code>函数 或     <code>for</code>  或 <code>for of</code> 等</p></li><li><p>映射：<code>Array.prototype.map()</code>函数</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'alan'</span>,<span class="string">'turing'</span>];</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;ul&gt;&#123;arr.map(<span class="function">(<span class="params">ele</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>ele<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)&#125;&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h3 id="组合和继承"><a href="#组合和继承" class="headerlink" title="组合和继承"></a>组合和继承</h3><ul><li><p>子组件传递</p><ul><li><p><code>props.children</code> 表示组件的所有<strong>子节点</strong> </p><ul><li><p>无子节点：<code>undefined</code></p></li><li><p>一个子节点：<code>Object</code></p></li><li><p>多个子节点：<code>Array</code></p><p> React 提供一个工具方法<code>React.Children.map(children, callback)</code>来遍历子节点，而不用担心 <code>props.children</code> 的数据类型。 </p></li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyBorder</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;<span class="string">'FancyBorder FancyBorder-'</span> + props.color&#125;&gt;</span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WelcomeDialog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;FancyBorder color=<span class="string">"blue"</span>&gt;</span><br><span class="line">      &lt;h1 className=<span class="string">"Dialog-title"</span>&gt;Welcome&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p className="Dialog-message"&gt;Thank you for visiting our space!&lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/FancyBorder&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>显式结果</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'FancyBorder FancyBorder-blue'</span>&gt;</span><br><span class="line">     &lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">"Dialog-title"</span>&gt;Welcome&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">     &lt;p class="Dialog-message"&gt;Thank you for visiting our space!&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>插槽</strong>：将所需内容传入props，并使用响应的props</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SplitPane</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"SplitPane"</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">"SplitPane-left"</span>&gt;</span><br><span class="line">        &#123;props.left&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h1&gt; Hello React&lt;/</span>h1&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;SplitPane left=&#123;&lt;Contacts /</span>&gt;&#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p> <code>&lt;Contacts /&gt;</code>之类的 React 元素本质就是<strong>对象</strong>（object），所以你可以把它们当作 props，像其他数据一样传递。这种方法可能使你想起别的库中“槽”（slot）的概念，但在 React 中没有“槽”这一概念的限制，你可以将任何东西作为 props 进行传递。 </p></blockquote><h3 id="获取真实DOM节点"><a href="#获取真实DOM节点" class="headerlink" title="获取真实DOM节点"></a>获取真实DOM节点</h3><ul><li><code>this.refs.xx</code></li></ul><blockquote><p>注：必在虚拟DOM插入文档后才能使用该属性</p></blockquote><h5 id="在react中渲染html代码"><a href="#在react中渲染html代码" class="headerlink" title="在react中渲染html代码"></a>在react中渲染html代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div dangerouslySetInnerHTML=&#123;&#123;<span class="attr">__html</span>: code&#125;&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener">完整生命周期图谱</a></p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191104194337150.png" alt="image-20191104194337150"></p><h3 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h3><ol><li><p><code>constructor</code>：设置组件的初始化状态</p></li><li><p><code>static getDerivedStateFromProps()</code></p></li><li><p><code>render</code></p></li><li><p><code>componentDidMount</code>：组件已经被<strong>渲染到页面</strong>中后触发</p></li></ol><h3 id="2-运行中"><a href="#2-运行中" class="headerlink" title="2.运行中"></a>2.运行中</h3><ol><li><p><code>static getDerivedStateFromProps()</code></p></li><li><p><code>shouldComponentUpdate(nextProps, nextState)</code></p><p> 当 props 或 state 发生变化时 ， 会在渲染执行之前被调用。 </p><p> 首次渲染或使用 <code>forceUpdate()</code> 时不会调用该方法。 </p></li><li><p><code>render()</code></p></li><li><p><code>getSnapshotBeforeUpdate()</code></p></li><li><p><code>componentDidUpdate</code></p><p> 组件被更新完成后触发。页面中产生了新的DOM的元素，可以进行DOM操作 </p></li></ol><h3 id="3-销毁阶段"><a href="#3-销毁阶段" class="headerlink" title="3.销毁阶段"></a>3.销毁阶段</h3><ol><li><p><code>componentWillUnmount</code></p><p> 组件被销毁时触发。这里我们可以进行一些清理操作，例如清理定时器，取消Redux的订阅事件等等。 </p></li></ol><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><ol><li><code>static getDerivedStateFromError()</code></li><li><code>componentDidCatch()</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;三大主流框架&quot;&gt;&lt;a href=&quot;#三大主流框架&quot; class=&quot;headerlink&quot; title=&quot;三大主流框架&quot;&gt;&lt;/a&gt;三大主流框架&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Angular&lt;/code&gt; 出来&lt;strong&gt;较早&lt;/strong&gt;的框架 。学
      
    
    </summary>
    
    
    
      <category term="React" scheme="https://turing5467.github.io/tags/React/"/>
    
  </entry>
  
</feed>
